{"_id":"4d9MaEr7rJdWS1NY","name":"CD Animal Reaction","type":"script","author":"msuh6wePTuFs4VOF","img":"icons/creatures/mammals/dog-husky-white-blue.webp","scope":"global","command":"const reactionTable = {\n  Chaser: {\n    attack: ' it outnumbers characters. ',\n    flee: '5'\n  },\n  Killer: {\n    attack: '6',\n    flee: '3'\n  },\n  Pouncer: {\n    attack: ' it has surprise. ',\n    flee: ' surprised. '\n  },\n  Siren: {\n    attack: ' it has surprise. ',\n    flee: ' it is surprised. '\n  },\n  Trapper: {\n    attack: ' it has surprise. ',\n    flee: '5'\n  },\n  Filter: {\n    attack: '10',\n    flee: '5'\n  },\n  Grazer: {\n    attack: '8',\n    flee: '6'\n  },\n  Intermittent: {\n    attack: '10',\n    flee: '4'\n  },\n  Eater: {\n    attack: '5',\n    flee: '4'\n  },\n  Gatherer: {\n    attack: '9',\n    flee: '7'\n  },\n  Hunter: {\n    attack: ' 6+ when larger, Otherwise 10+ ',\n    flee: '5'\n  },\n  CarrionEater: {\n    attack: '11',\n    flee: '7'\n  },\n  Hijacker: {\n    attack: '7',\n    flee: '6'\n  },\n  Intimidator: {\n    attack: '8',\n    flee: '7'\n  },\n  Reducer: {\n    attack: '10',\n    flee: '7'\n  }\n};\n\nconst animalType = await getAnimalType();\nconst roll = await new Roll(\"2d6\").roll({async: true});\nchatReaction(animalType, roll);\n\nasync function getAnimalType () {\n  let html = `<label>Animal Type</label>`;\n  html += `<select name =\"chosenType\" value=\"Chaser\">`;\n  for (const animal in reactionTable) {\n    html += `<option value = \"${animal}\">${animal}</option>`;\n  }\n  html += `</select>`;\n\n  // Get Input\n  const animalType = await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: 'Animal Reaction',\n      content: html,\n      buttons: {\n        OK: {\n          label: 'Roll',\n          callback:\n                    (html) => { resolve(html.find('[name=\"chosenType\"]')[0].value) }\n        }\n      }\n    }).render(true)\n  });\n  return animalType;\n}\n\nasync function chatReaction (type, roll) {\n  let animalFlees = false;\n  let animalAttacks = false;\n  let specialFlee = \"\";\n  let specialAttack = \"\";\n  let flavor = \"\";\n\n  if (isNaN(reactionTable[type].flee)) {\n    specialFlee = reactionTable[type].flee\n  } else if (roll.total <= parseInt(reactionTable[type].flee)) {\n    animalFlees = true;\n  }\n\n  if (isNaN(reactionTable[type].attack)) {\n    specialAttack = reactionTable[type].attack\n  } else if (roll.total >= parseInt(reactionTable[type].attack)) {\n    animalAttacks = true;\n  }\n\n  if (animalAttacks) {\n    flavor = \"Animal attacks party!\";\n  } else if (animalFlees) {\n    flavor = \"Animal flees from party!\";\n  } else if (specialAttack || specialFlee) {\n    if (specialAttack) { flavor += \"Animal may attack if \" + specialAttack; }\n    if (specialFlee) { flavor += \"Animal may flee if \" + specialFlee; }\n  } else {\n    flavor = \"Animal does not react\";\n  }\n\n  await roll.toMessage({\n    speaker: ChatMessage.getSpeaker({ alias: type }),\n    flavor: flavor\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"core":{"sourceId":"Macro.11dCNq3kMAp96Ztk"},"cf":{"id":"temp_f505ax12at"}}}
{"name":"Trade Macro for MgT2 using Dynamic Macros","type":"script","author":"OIomk1IgyRly5ocC","img":"systems/twodsix/assets/icons/components/cargo.svg","scope":"global","command":"/* eslint-disable no-undef */\n/* eslint-disable semi */\n// Macro to generated trade goods pricing and quantities for sale based on\n// planet UPP passed by Dynamic Macro Link\n// when using Dynamic Macro Link in a journal entry, make sure to enter the world name first, followed by the UPP, e.g. @2eTrade[Regina;A753C55-EA]{2e Trade Goods}\n// UPP can contain travel zone (A/R) after TL, e.g. A753C55-EA, mostly important for illegal goods\n// when setting up rollable tables for trade goods, make sure any DM bigger than 9 is written in hexcode, e.g. DM+10 becomes DM+A\n// also, trade good availability is based on purchase DM, not a seperate column, so if you want to include a trade good that has not purchase modifer in 2e, set the modifer to +0 to include it anyways\n\nconst DEBUG = false; // Display debugging info to console\nconst RANDOM = true; // Whether trade goods for player to buy are selected at random (true).  Otherwise, goods available are determined by trade codes.\nconst planetName = args[0];\nconst uwp = args[1];\ngenerateTable(uwp);\n\nasync function generateTable (uwp) {\n  let traderDM = 0;\n  const compendium = 'CL';\n  await new Promise((resolve) => {\n    new Dialog({\n      content: `\n      <input placeholder = \"Player Broker - Trader Broker\" type=\"number\" name=\"traderDM\"/>`,\n      title: 'Generate Trade Table',\n      buttons: {\n        TE: {\n          label: 'Okay',\n          callback: btn => {\n            resolve(traderDM = btn.find(\"[name='traderDM']\").val());\n          }\n        }\n      }\n\n    }).render(true);\n  });\n  const tcodes = getTradeCode(uwp);\n  if (traderDM === '') { traderDM = 0; }\n  const tcodesFlat = planetName + ' (' + uwp + ', ' + tcodes.join(', ') + '), Trader DM: ' + traderDM;\n  const starBase = uwp[0];\n  const population = hexToBase10(uwp[4]);\n\n  if (DEBUG) {\n    console.log('Trade codes:', tcodes);\n  }\n  if (DEBUG) {\n    console.log('UWP: ', uwp, traderDM);\n  }\n\n  let tradeTable = '';\n  tradeTable +=\n      processTradeTable('Advanced Trade Goods - ' + compendium, tcodes,\n        parseInt(traderDM), compendium, starBase, population);\n\n  tradeTable += processTradeTable('Basic Goods - ' + compendium, tcodes,\n    parseInt(traderDM), compendium, starBase, population);\n\n  const htmlContent = `<table><tbody><tr>\n      <th style=\"text-align:left\">Good</th>\n      <th style=\"text-align:center\">Available to Buy (tons)</th>\n      <th style=\"text-align:center\">Player Buys (Cr)</th>\n      <th style=\"text-align:center\">Player Sells (Cr)</th></tr>\n      ${tradeTable}\n      </tbody></table>`;\n\n  await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: `Trade Table for: ${tcodesFlat}`,\n      content: htmlContent,\n      buttons: {\n        Ok: {\n          label: 'Ok',\n          callback: (html) => { resolve(html.find('input').val()); },\n          height: '12px',\n          resizable: true\n        },\n        Output: {\n          label: 'Output',\n          callback: (html) => {\n            JournalEntry.create({\n              name: 'Trade Output',\n              content: htmlContent\n            });\n          },\n          height: '12px',\n          resizable: true\n        }\n      }\n    },\n    { width: 700, height: 600 })\n      .render(true);\n  });\n}\n\nfunction processTradeTable (tableName, trcodes, offset, compendium, starBase, population) {\n  let returnText = '';\n  let isAvailable = [];\n  const table = game.tables.contents.find(t => t.name === tableName);\n\n  // If random selection, determine trade goods available\n  if ((tableName.indexOf('Basic') === -1 && RANDOM) || compendium === '2e') {\n    isAvailable = determineGoods(table, compendium, starBase, population);\n  }\n  if (DEBUG) {\n    console.log(isAvailable);\n  }\n\n  // Process each item (good) in table\n  for (let row = 0; row < table.data.results.size; ++row) {\n    // Parse row of table that is tab delimited\n    const details = table.data.results._source[row].text.split('\\t');\n\n    let tons = 0;\n    let pSellPr = 0;\n    let pBuyPr = 0;\n    let pBuyMod = 0;\n    let pSellMod = 0;\n    let popModifier = 0;\n\n    // Determine planet trade code price DMs\n    switch (compendium) {\n      case 'CL':\n        pSellMod = getMod(trcodes, details[4]);\n        pBuyMod = getMod(trcodes, details[3]);\n        break;\n      case 'CE':\n      case '2e':\n        pSellMod = getMod(trcodes, details[4]) - getMod(trcodes, details[3]);\n        pBuyMod = getMod(trcodes, details[3]) - getMod(trcodes, details[4]);\n        break;\n    }\n\n    if (DEBUG) {\n      console.log('Name: ', details[0]);\n    }\n    if (DEBUG) {\n      console.log('pSellMod:', pSellMod);\n    }\n    if (DEBUG) {\n      console.log('pBuyMod:', pBuyMod);\n    }\n    // Determine Population modifier for tonnage\n    if (population <= 3) {\n      popModifier = -3;\n    } else if (population >= 9) {\n      popModifier = +3;\n    }\n\n    // Determine tons available for player to buy\n    if (DEBUG) {\n      console.log('dice: ', details[2], ', popMod: ', popModifier);\n    }\n    if (RANDOM) {\n      tons = Math.max(new Roll('@dice + @DM', { dice: details[2], DM: popModifier }).evaluate({ async: false }).total, 0);\n      if (tableName.indexOf('Basic') === -1) {\n        tons *= isAvailable[row];\n      }\n    } else {\n      if (tableName.indexOf('Basic') !== -1) {\n        tons = Math.max(new Roll('@dice + @DM', { dice: details[2], DM: popModifier }).evaluate({ async: false }).total, 0);\n      } else if (availableGood(trcodes, details[3])) {\n        tons = Math.max(new Roll('@dice + @DM', { dice: details[2], DM: popModifier }).evaluate({ async: false }).total, 0);\n      } else if (compendium === '2e') {\n        tons = Math.max(new Roll('@dice + @DM', { dice: details[2], DM: popModifier }).evaluate({ async: false }).total, 0);\n      }\n    }\n\n    // Determine Player Buys price\n    if (tons === 0) {\n      tons = '---';\n      pBuyPr = '---';\n    } else {\n      pBuyPr = Math.round(details[1] * rollPriceAdjust(pBuyMod + offset, 'buy', compendium));\n    }\n\n    // Determine Player Sells price\n    pSellPr = Math.round(\n      details[1] * rollPriceAdjust(pSellMod + offset, 'sell', compendium));\n\n    // generate buy-sell table row in html\n    if (row === table.data.results.size - 1) {\n      returnText +=\n          `<tr style=\"border-bottom:1px solid red\"><td style=\"padding-right:5px\">${details[0]}</td>`;\n    } else {\n      returnText += `<tr><td style=\"padding-right:5px\">${details[0]}</td>`;\n    }\n\n    returnText += `<td style=\"padding-right:5px; text-align:center\">${tons}</td>\n    <td style=\"padding-right:5px; text-align:center\">${pBuyPr}</td><td style=\"padding-right:5px; text-align:center\">${pSellPr}</td></tr>`;\n  }\n\n  return (returnText);\n}\n\nfunction determineGoods (table, compendium, starBase, population) {\n  const numItems = table.data.results.size;\n  // fill with zeros\n  const availList = new Uint8Array(numItems);\n\n  let baseAdj = 0;\n\n  // Calculate starport roll bonus if Cepheus Light\n  if (compendium === 'CL') {\n    switch (starBase.toUpperCase()) {\n      case 'A':\n        baseAdj = 4;\n        break;\n      case 'B':\n        baseAdj = 2;\n        break;\n      case 'C':\n        baseAdj = 1;\n        break;\n      case 'D':\n        baseAdj = 0;\n        break;\n      case 'E':\n        baseAdj = -2;\n        break;\n    }\n  }\n\n  let numDraws = 0;\n  if (compendium === '2e') {\n    numDraws = population;\n  } else {\n    numDraws = Math.max(1, new Roll('1D6+@adj', { adj: baseAdj }).evaluate({ async: false }).total);\n  }\n\n  if (DEBUG) {\n    console.log('Number of Draws: ', numDraws);\n  }\n\n  for (let i = 0; i < numDraws; ++i) {\n    const item = new Roll('1D@num', { num: numItems }).evaluate({ async: false }).total;\n    ++availList[item - 1];\n  }\n  return (availList);\n}\n\nfunction getMod (planetTrCodes, goodCodes) {\n  let modifier = 0;\n  for (const code of planetTrCodes) {\n    const codePos = goodCodes.indexOf(code);\n    if (codePos !== -1) {\n      const codeValue = hexToBase10(goodCodes[codePos + 3]);\n      if (codeValue > modifier) {\n        modifier = codeValue;\n      }\n    }\n  }\n  return (parseInt(modifier));\n}\n\nfunction rollPriceAdjust (offset, type, compendium) {\n  let tableName = '';\n  if (type === 'sell') {\n    tableName += 'Sales Price Table';\n  } else {\n    tableName += 'Purchase Price Table';\n  }\n  tableName += ` - ${compendium}`;\n\n  if (DEBUG) {\n    console.log('Price Adjustment Table: ', tableName);\n  }\n\n  const table = game.tables.contents.find(t => t.name === tableName);\n\n  const r = new Roll('3D6+@mod', { mod: offset }).evaluate({ async: false }).total;\n  const details =\n      table.data.results._source[Math.min(Math.max(r - 2, 0), table.data.results.size - 1)].text;\n\n  if (DEBUG) {\n    console.log('Roll on Adj Table: ', r);\n  }\n  if (DEBUG) {\n    console.log('Relative Price: ', details);\n  }\n  return (parseInt(details) / 100);\n}\n\nfunction availableGood (trcodes, goodCodes) {\n  for (const code of trcodes) {\n    if (goodCodes.indexOf(code) !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Generate Trade Codes per Cepheus Light Rules\nfunction getTradeCode (UWPprofile) {\n  const returnText = [];\n\n  // Strip out dash if used in profile\n  UWPprofile = UWPprofile.replace('-', '');\n\n  if (UWPprofile.length > 7) {\n    const size = hexToBase10(UWPprofile[1]);\n    const atmo = hexToBase10(UWPprofile[2]);\n    const hydro = hexToBase10(UWPprofile[3]);\n    const pop = hexToBase10(UWPprofile[4]);\n    const gov = hexToBase10(UWPprofile[5]);\n    const law = hexToBase10(UWPprofile[6]);\n    const techL = hexToBase10(UWPprofile[7]);\n    if (UWPprofile[8]) {\n      const travelZ = UWPprofile[8];\n      if (travelZ === 'A' || travelZ === 'a') {\n        returnText.push('Az');\n      }\n      if (travelZ === 'R' || travelZ === 'r') {\n        returnText.push('Rz');\n      }\n    }\n\n    if (atmo > 3 && atmo < 10 && hydro > 3 && hydro < 9 && pop > 4 && pop < 8) {\n      returnText.push('Ag');\n    }\n\n    if (size === 0 && atmo === 0 && hydro === 0) {\n      returnText.push('As');\n    }\n\n    if (pop === 0 && gov === 0 && law === 0) {\n      returnText.push('Ba');\n    }\n\n    if (atmo > 1 && atmo < 10 && hydro === 0) {\n      returnText.push('De');\n    }\n\n    if (atmo > 9 && hydro > 0) {\n      returnText.push('Fl');\n    }\n\n    if (size > 5 && size < 9 && (atmo === 5 || atmo === 6 || atmo === 8) && hydro > 4 && hydro < 8) {\n      returnText.push('Ga');\n    }\n\n    if (pop > 8) {\n      returnText.push('Hi');\n    }\n\n    if (techL > 11) {\n      returnText.push('Ht');\n    }\n\n    if (atmo < 2 && hydro > 0) {\n      returnText.push('Ic');\n    }\n\n    if ((atmo < 3 || atmo === 4 || atmo === 7 || (atmo > 8 && atmo < 13)) && pop > 8) {\n      returnText.push('In');\n    }\n\n    if (pop > 0 && pop < 4) {\n      returnText.push('Lo');\n    }\n\n    if (pop > 0 && techL < 6) {\n      returnText.push('Lt');\n    }\n\n    if (atmo < 4 && hydro < 4 && pop > 5) {\n      returnText.push('Na');\n    }\n\n    if (pop > 3 && pop < 7) {\n      returnText.push('Ni');\n    }\n\n    if (atmo > 1 && atmo < 6 && hydro < 4) {\n      returnText.push('Po');\n    }\n\n    if ((atmo === 6 || atmo === 8) && pop > 5 && pop < 9 && gov > 3 && gov < 10) {\n      returnText.push('Ri');\n    }\n\n    if (((atmo > 2 && atmo < 10) || atmo > 12) && hydro === 10) {\n      returnText.push('Wa');\n    }\n\n    if (atmo === 0) {\n      returnText.push('Va');\n    }\n  }\n  return (returnText);\n}\n\n// Convert hex value to base10\nfunction hexToBase10 (value) {\n  switch (value.toUpperCase()) {\n    case 'A':\n      return (10);\n    case 'B':\n      return (11);\n    case 'C':\n      return (12);\n    case 'D':\n      return (13);\n    case 'E':\n      return (14);\n    case 'F':\n      return (15);\n    case 'G':\n      return (16);\n    default:\n      return (Number(value));\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"OIomk1IgyRly5ocC":3},"flags":{"core":{"sourceId":"Macro.I2mgoMKPFlJvHKCc"},"cf":{"id":"temp_fjmheaydrno"}},"_id":"76icBqXqOsPUq6w7"}
{"_id":"CXB8MnMMYZIvNROd","name":"#[CF_tempEntity]","type":"chat","author":"GOmBKof9PfoHZ54T","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"GOmBKof9PfoHZ54T":3},"flags":{"cf":{"id":"temp_f2ldg9aw4y","folderPath":[],"color":"#000000","fontColor":"#FFFFFF","name":"NPC Importers","children":[],"icon":"","sorting":"a","contents":["DXUAcqUxJ4E1dPTG","zhEUKPeQPyoZ0X6P","F3y3FB0IKgF29v3e"],"version":"2.4.6"}}}
{"name":"Import Cepheus SRD Subsector v10","type":"script","scope":"global","author":"OIomk1IgyRly5ocC","img":"systems/twodsix/assets/icons/astrogation.svg","command":"// Simple planet creator based on information from Cepheus Light, Cepheus Engine\n// SRD and https://travellermap.com/doc/secondsurvey#uwp\n// GEnie / SEC Format for input\n// using the generator https://www.orffenspace.com/cepheus-srd/tools/subsector-generator.html\n// Fields used\n// 1-13: Name\n// 15-18: HexNbr\n// 20-28: UWP\n// 30: Bases\n// 49: Zone\n// 54: Number of Gas Giants\nconst gridSize = 100;\n\ntranslateCode();\n\nasync function translateCode () {\n  let topLabel = '';\n  const value = await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: 'Enter World GEnie Code Block',\n      content: `<label>Enter subsector block</label><textarea type=\"text\" name=\"input\" cols=\"40\" rows=\"5\"></textarea>`,\n      buttons: {\n        uwp: {\n          label: 'UWP',\n          callback: (html) => { resolve(html.find('[name=\"input\"]')[0].value); topLabel = 'UWP'; }\n        },\n        tradeCodes: {\n          label: 'Trade Codes',\n          callback: (html) => { resolve(html.find('[name=\"input\"]')[0].value); topLabel = 'Trade'; }\n        }\n      }\n    }).render(true);\n  });\n\n  if (value !== '') {\n    // parse input text block into lines\n    const processedText = value.split('\\n');\n\n    const newNotes = [];\n    let newDrawings = [];\n    let newTiles = [];\n    let maxX = 0;\n    let maxY = 0;\n\n    // new journal entry\n    const newJournal = await JournalEntry.create({\n      name: \"New Subsector\"\n    });\n\n\n    // add new journal entries, notes, and drawing text for each planet\n    for (let i = 0; i < processedText.length; ++i) {\n      const parse = parseCode(processedText[i]);\n      let planetData = await newPlanet(parse, newJournal, topLabel);\n      newNotes.push(planetData.note);\n      newTiles = newTiles.concat(planetData.returnTiles);\n      newDrawings = newDrawings.concat(planetData.returnDrawing);\n      // adjust initial display position\n      if (planetData.note.x > maxX) { maxX = planetData.note.x;}\n      if (planetData.note.y > maxY) { maxY = planetData.note.y;}\n    }\n\n    Scene.create({\n      name: 'Temp Scene',\n      active: false,\n      navigation: true,\n      backgroundColor: '#000000',\n      gridColor: '#c4c4c4',\n      grid: gridSize,\n      gridType: CONST.GRID_TYPES.HEXEVENQ,\n      notes: newNotes,\n      drawings: newDrawings,\n      initial: {x: Math.round(maxX / 2), y: Math.round(maxY / 2), scale: 0.7},\n      tiles: newTiles,\n      padding: 0.05,\n      width: maxX,\n      height: maxY\n    });\n  }\n}\n\nasync function newPlanet (parse, newJournal, topLabel) {\n  const addedPlanet = await newJournal.createEmbeddedDocuments(\"JournalEntryPage\",[{\n          text: {content: parse.text},\n          name: parse.planetName\n        }]);\n\n  // Calculate pixel position of items to display\n  const lrgFontSize = 12;\n  const smFontSize = lrgFontSize - 2;\n  const minSize = 33;\n  const maxSize = Math.max((gridSize * Math.sqrt(3.0) / 2.0 - 2.5 * lrgFontSize), minSize);\n  const iconSize = parseInt(minSize + (maxSize - minSize) * hexToBase10(parse.UWP[1]) / 10.0);\n  const iconPos = getPixelFromHex(parse.col, parse.row);\n  const yOffset = 0.5 * iconSize + 0.7 * lrgFontSize;\n\n  // Pick top label to use\n  let topText = '';\n  if (topLabel === 'UWP') {\n    topText = parse.UWP;\n  } else {\n    topText = parse.tCodes;\n  }\n\n  // Pick planet icon\n  let planetIcon = 'systems/twodsix/assets/icons/Starport' + parse.UWP[0] + '.svg';\n  if (parse.UWP[1] === '0') {\n    planetIcon = 'systems/twodsix/assets/icons/asteroid-' + parse.UWP[0] + '.svg';\n  }\n\n  // generate note and drawing objects\n  // add note and icon\n  const returnNote = {\n    entryId: newJournal.id,\n    pageId: addedPlanet[0].id,\n    text: '-',\n    fontSize: smFontSize,\n    textAnchor: CONST.TEXT_ANCHOR_POINTS.CENTER,\n    x: iconPos.x,\n    y: iconPos.y,\n    icon: planetIcon,\n    iconSize: iconSize,\n    iconTint: parse.color,\n    width: smFontSize + 2,\n    height: smFontSize + 2,\n    strokeWidth: 0\n\n  };\n  // add planet name\n  const returnDrawing = [{\n    x: Math.round(iconPos.x - measureText(parse.planetName, lrgFontSize)/2 - 1),\n    y: Math.round(iconPos.y + yOffset - lrgFontSize/2 - 1),\n    z: 20,\n    t: CONST.DRAWING_TYPES.TEXT,\n    text: parse.planetName.replace(' ', '\\xa0'),\n    fontSize: lrgFontSize,\n    width: measureText(parse.planetName, lrgFontSize) + 2,\n    height: lrgFontSize + 2,\n    textColor: '#ffffff',\n    strokeWidth: 0,\n    strokeColor: \"#000000\"\n  },\n  // add UWP or trade codes\n  {\n    text: topText,\n    x: Math.round(iconPos.x - measureText(topText, smFontSize)/2 - 1),\n    y: Math.round(iconPos.y - yOffset - smFontSize/2 - 1),\n    z: 20,\n    width: measureText(topText, smFontSize) + 2,\n    height: smFontSize + 2,\n    t: CONST.DRAWING_TYPES.TEXT,\n    textColor: '#ffffff',\n    fontSize: smFontSize,\n    strokeWidth: 0,\n    strokeColor: \"#000000\"\n  }];\n\n  // add gas giant or base markers if applicable\n  const returnTiles = [];\n  for (let i = 0; i < parse.markers.length; ++i) {\n    returnTiles.push({\n      x: Math.round(iconPos.x + iconSize / 2 + smFontSize / 4),\n      y: Math.round(iconPos.y + smFontSize * (i - 0.5 * parse.markers.length)),\n      z: 20,\n      t: CONST.DRAWING_TYPES.RECTANGLE,\n      width: smFontSize,\n      height: smFontSize,\n      tint: '#d6d6d6',\n      img: 'systems/twodsix/assets/icons/' + getMarkerIcon(parse.markers[i])\n    });\n  }\n\n  // add planet icon again incase notes are turned off\n  returnTiles.push({\n    x: Math.round(iconPos.x - iconSize / 2),\n    y: Math.round(iconPos.y - iconSize / 2),\n    z: 20,\n    t: CONST.DRAWING_TYPES.RECTANGLE,\n    width: iconSize,\n    height: iconSize,\n    tint: parse.color,\n    img: planetIcon\n  });\n\n  // add color for Zone\n  let zoneColor = '#ffffff';\n  switch (parse.zone) {\n    case 'A':\n      zoneColor = '#cc9a06';\n      break;\n    case 'R':\n      zoneColor = '#ff0000';\n      break;\n  }\n  // Add allegiance\n  returnDrawing.push({\n    text: parse.aleg,\n    x: Math.round(iconPos.x - iconSize/2 - measureText(parse.aleg, smFontSize) - 4),\n    y: iconPos.y - smFontSize/2 - 1,\n    z: 20,\n    t: CONST.DRAWING_TYPES.TEXT,\n    textColor: zoneColor,\n    fontSize: smFontSize,\n    width: measureText(parse.aleg, smFontSize) + 2,\n    height: smFontSize + 2,\n    strokeWidth: 0,\n    strokeColor: \"#000000\"\n  });\n\n  return ({ note: returnNote, returnDrawing: returnDrawing, returnTiles: returnTiles });\n}\n\nfunction getMarkerIcon (textSymbol) {\n  switch (textSymbol) {\n    case 'N':\n      return ('star-formation.svg');\n    case 'P':\n      return ('pirate-skull.svg');\n    case 'S':\n      return ('scout-ship.svg');\n    case 'G':\n      return ('jupiter.svg');\n    default:\n      return ('perspective-dice-six-faces-random.svg');\n  }\n}\n\nfunction getPixelFromHex (col, row) {\n  const width = gridSize;\n  const sqrt3 = Math.sqrt(3.0);\n\n  // Add +1 offset due to needing non-zero padding\n  const xPixel = Math.round((0.75 * (col + 1) + 0.5) * width);\n  const yPixel = Math.round(((row + 1) + 0.5 * ((col + 1) & 1) + 0.5) * sqrt3 / 2.0 * width);\n\n  return ({\n    x: xPixel,\n    y: yPixel\n  });\n}\n\nfunction parseCode (profile) {\n  const planetName = profile.substring(0, 13).trim();\n  const column = Number(profile.substring(14, 16));\n  const row = Number(profile.substring(16, 18));\n  const UWP = profile.substring(19, 28);\n  const bases = profile[29];\n  let retZone = profile[48];\n  const allegiance = profile.substring(55, 57);\n\n  // Strip out dash from UWP\n  const cleanUWP = UWP.substring(0, 7) + UWP[8];\n\n  const UWPtables = [\n    'Starport Type', 'World Size - CL', 'Atmosphere', 'Hydrographics',\n    'Population', 'Government', 'Law Level - CL', 'Tech Level - CL'\n  ];\n  let planetDescrip = `<table style=\"width=95%; margin: 12px;\"><tbody><tr><th style =\"width: 20%;\">Characteristic</th><th style =\"width: 70%;\">Description</th></tr>`;\n  // parse starport, this is non-numeric\n  planetDescrip += `<tr><td style=\"padding-right: 5px;\">${UWPtables[0]} (${\n      cleanUWP[0]})</td><td>${getStarportDescr(cleanUWP[0])}</td></tr>`;\n\n  // process rest of UWP\n  for (let i = 1; i < Math.min(profile.length, UWPtables.length); i++) {\n    planetDescrip += `<tr>${getUWPparameter(cleanUWP[i], UWPtables[i])}</tr>`;\n  }\n\n  // generate trade codes\n  const trData = getTradeCodes(cleanUWP);\n  planetDescrip += trData.text;\n  planetDescrip += `</tbody></table>`;\n\n  // set zone color\n  if (retZone === ' ') { retZone = trData.zone; }\n\n  // add base and gas giant codes\n  const markers = [];\n  if (profile[53] !== '0') {\n    markers.push('G');\n  }\n  switch (bases) {\n    case 'N':\n      markers.push('N');\n      break;\n    case 'S':\n      markers.push('S');\n      break;\n    case 'P':\n      markers.push('P');\n      break;\n    case 'A':\n      markers.push('N');\n      markers.push('S');\n      break;\n    case 'G':\n      markers.push('S');\n      markers.push('P');\n      break;\n  }\n\n  return ({ planetName: planetName, col: column, row: row, UWP: UWP, text: planetDescrip, color: trData.color, tCodes: trData.tCodes, markers: markers, zone: retZone, aleg: allegiance });\n}\n\n// Lookup a hex digit from a roll table\nfunction getUWPparameter (value, tableName) {\n  const item = hexToBase10(value);\n  const table = game.tables.contents.find(t => t.name === tableName);\n\n  if (item < table.results.size) {\n    const details = table.results._source[item].text;\n    return (`<td style=\"padding-right:5px\">${tableName} (${value})</td><td>${details}</td>`);\n  } else {\n    return (`<td style=\"padding-right:5px\">${tableName} (${value})</td><td>UNKNOWN TABLE ITEM</td>`);\n  }\n}\n\n// Convert hex value to base10\nfunction hexToBase10 (value) {\n  switch (value.toUpperCase()) {\n    case 'A':\n      return (10);\n    case 'B':\n      return (11);\n    case 'C':\n      return (12);\n    case 'D':\n      return (13);\n    case 'E':\n      return (14);\n    case 'F':\n      return (15);\n    case 'G':\n      return (16);\n    default:\n      return (parseInt(value));\n  }\n}\n\n// Lookup starport description (letter values that are not hex)\nfunction getStarportDescr (value) {\n  let rtext = '';\n  switch (value.toUpperCase()) {\n    case 'A':\n      rtext =\n        'Excellent Quality. Refined fuel and annual maintenance overhaul available. Shipyard capable of constructing starships and non-starships present.';\n      break;\n    case 'B':\n      rtext =\n        'Good Quality. Refined fuel and annual maintenance overhaul available. Shipyard capable of constructing non-starships present.';\n      break;\n    case 'C':\n      rtext =\n        'Routine Quality. Only unrefined fuel available. Reasonable repair facilities present.';\n      break;\n    case 'D':\n      rtext =\n        'Poor Quality. Only unrefined fuel available. No repair facilities present.';\n      break;\n    case 'E':\n      rtext =\n        'Frontier Installation. Essentially a marked spot of bedrock with no fuel, facilities, or bases present.';\n      break;\n    case 'X':\n      rtext = 'No Starport. No provision is made for any ship landings.';\n      break;\n    default:\n      rtext = 'Unknown';\n  }\n  return (rtext);\n}\n\n// Generate Trade Codes per Cepheus Light Rules\nfunction getTradeCodes (profile) {\n  let rtext = '';\n  let rCode = '';\n  let rColor = '#ffffff';\n  let zText = '';\n\n  if (profile.length < 8) {\n    rtext += 'UWP Code too short</td></tr>';\n  } else {\n    const size = hexToBase10(profile[1]);\n    const atmo = hexToBase10(profile[2]);\n    const hydro = hexToBase10(profile[3]);\n    const pop = hexToBase10(profile[4]);\n    const gov = hexToBase10(profile[5]);\n    const law = hexToBase10(profile[6]);\n    const techL = hexToBase10(profile[7]);\n\n    if (atmo > 3 && atmo < 10 && hydro > 3 && hydro < 9 && pop > 4 && pop < 8) {\n      rtext += 'Ag - Agricultural, ';\n      rCode += 'Ag\\xa0';\n    }\n\n    if (size === 0 && atmo === 0 && hydro === 0) {\n      rtext += 'As - Asteroid, ';\n      rCode += 'As\\xa0';\n    }\n\n    if (pop === 0) {\n      rtext += 'Ba - Barren, ';\n      rCode += 'Ba\\xa0';\n      rColor = '#999999';\n    }\n\n    if (atmo > 1 && hydro === 0) {\n      rtext += 'De - Desert, ';\n      rCode += 'De\\xa0';\n      rColor = '#cc8800';\n    }\n\n    if (atmo > 9 && hydro > 0) {\n      rtext += 'Fl - Non-water Fluid Oceans, ';\n      rCode += 'Fl\\xa0';\n      rColor = '#ff6600';\n    }\n\n    if ((atmo === 5 || atmo === 6 || atmo === 8) && hydro > 3 && hydro < 10 && pop > 3 && pop < 9) {\n      rtext += 'Ga - Garden, ';\n      rCode += 'Ga\\xa0';\n      rColor = '#009900';\n    }\n\n    if (pop > 8) {\n      rtext += 'Hi - High Population, ';\n      rCode += 'Hi\\xa0';\n    }\n\n    if (techL > 11) {\n      rtext += 'Ht - High Technology, ';\n      rCode += 'Ht\\xa0';\n    }\n\n    if (atmo < 2 && hydro > 0) {\n      rtext += 'Ic - Ice Capped, ';\n      rCode += 'Ic\\xa0';\n      rColor = '#ccccff';\n    }\n\n    if ((atmo < 3 || atmo === 4 || atmo === 7 || atmo === 9) && pop > 8) {\n      rtext += 'In - Industrial, ';\n      rCode += 'In\\xa0';\n    }\n\n    if (pop > 0 && pop < 4) {\n      rtext += 'Lo - Low Population, ';\n      rCode += 'Lo\\xa0';\n    }\n\n    if (techL < 6) {\n      rtext += 'Lt - Low Technology, ';\n      rCode += 'Lt\\xa0';\n    }\n\n    if (atmo < 4 && hydro < 4 && pop > 5) {\n      rtext += 'Na - Non Agricultural, ';\n      rCode += 'Na\\xa0';\n    }\n\n    if (pop > 3 && pop < 7) {\n      rtext += 'Ni - Non Industrial, ';\n      rCode += 'Ni\\xa0';\n    }\n\n    if (atmo > 1 && atmo < 6 && hydro < 4) {\n      rtext += 'Po - Poor, ';\n      rCode += 'Po\\xa0';\n    }\n\n    if ((atmo === 6 || atmo === 8) && pop > 5 && pop < 9) {\n      rtext += 'Ri - Rich, ';\n      rCode += 'Ri\\xa0';\n    }\n\n    if (hydro === 10) {\n      rtext += 'Wa - Water World, ';\n      rCode += 'Wa\\xa0';\n      rColor = '#3366cc';\n    }\n\n    if (atmo === 0) {\n      rtext += 'Va - Vacuum, ';\n      rCode += 'Va\\xa0';\n    }\n    // Get rid of extra coma and space\n    if (rtext.length > 0) {\n      rtext = rtext.slice(0, -2);\n    }\n    rtext += '</td></tr>';\n    // get rid of extra comma\n    if (rCode.length > 0) {\n      rCode = rCode.slice(0, -1);\n    }\n\n    if (atmo > 9 || (gov === 0 || gov === 7 || gov === 10) || (law === 0 || law > 8)) {\n      zText = 'A';\n    }\n  }\n\n  return ({ text: `<tr><td \"padding-right:5px\">Trade Codes</td><td>${rtext}`, color: rColor, tCodes: rCode, zone: zText });\n}\n\n//from https://www.codegrepper.com/code-examples/javascript/calculate+width+of+text+javascript\nfunction measureText(str, fontSize = 10) {\n  const widths = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2796875,0.2765625,0.3546875,0.5546875,0.5546875,0.8890625,0.665625,0.190625,0.3328125,0.3328125,0.3890625,0.5828125,0.2765625,0.3328125,0.2765625,0.3015625,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.2765625,0.2765625,0.584375,0.5828125,0.584375,0.5546875,1.0140625,0.665625,0.665625,0.721875,0.721875,0.665625,0.609375,0.7765625,0.721875,0.2765625,0.5,0.665625,0.5546875,0.8328125,0.721875,0.7765625,0.665625,0.7765625,0.721875,0.665625,0.609375,0.721875,0.665625,0.94375,0.665625,0.665625,0.609375,0.2765625,0.3546875,0.2765625,0.4765625,0.5546875,0.3328125,0.5546875,0.5546875,0.5,0.5546875,0.5546875,0.2765625,0.5546875,0.5546875,0.221875,0.240625,0.5,0.221875,0.8328125,0.5546875,0.5546875,0.5546875,0.5546875,0.3328125,0.5,0.2765625,0.5546875,0.5,0.721875,0.5,0.5,0.5,0.3546875,0.259375,0.353125,0.5890625]\n  const avg = 0.5279276315789471\n  return str\n    .split('')\n    .map(c => c.charCodeAt(0) < widths.length ? widths[c.charCodeAt(0)] : avg)\n    .reduce((cur, acc) => acc + cur) * fontSize\n}","ownership":{"default":0,"OIomk1IgyRly5ocC":3},"flags":{"core":{"sourceId":"Macro.CDBCiCogNtSyJcGy"}},"_stats":{"systemId":"twodsix","systemVersion":"1.45.2","coreVersion":"10.272","createdTime":1657742869353,"modifiedTime":1657742869353,"lastModifiedBy":"OIomk1IgyRly5ocC"},"folder":null,"sort":0,"_id":"DAP32dzknIFAVOlD"}
{"_id":"DYW2X8dLR1uIHdqt","name":"Internal - Starship","type":"script","author":"msuh6wePTuFs4VOF","img":"systems/twodsix/assets/icons/components/otherInternal.svg","scope":"global","command":"let compendiumTables = await game.packs.get(\"twodsix.cepheus-deluxe-tables\").getDocuments();\nlet table = await compendiumTables.find(o => o.name === \"Internal - Starship\");\nlet result = await table.draw();","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"core":{"sourceId":"Macro.2wp1RB1XaOIEUgOd"},"cf":{"id":"temp_yxfg7c9wgej"}}}
{"name":"2e Character Parser for Traveller Tools v10","type":"script","author":"OIomk1IgyRly5ocC","img":"icons/svg/wall-direction.svg","scope":"global","command":"/* eslint-disable no-undef */\n/* eslint-disable semi */\n// Take text block from https://travellertools.azurewebsites.net/Home/ and\n// translate into a character\n\ngetInputText();\n\n// Get text block and process\nasync function getInputText () {\n  // Get Input\n  const rawText = await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: `Copy and paste text for a single character`,\n      content:\n          `<label>Don't include menu bar (include all text with white background)</label><textarea type=\"text\" name=\"input\" cols=\"40\" rows=\"5\"></textarea>`,\n      buttons: {\n        OK: {\n          label: `Process`,\n          callback:\n              (html) => { resolve(html.find('[name=\"input\"]')[0].value); }\n        }\n      }\n    }).render(true);\n  });\n\n  // Abort if no text entered\n  if (rawText.length === 0) {\n    return;\n  }\n\n  // split input into lines of text\n  const processedText = rawText.split('\\n');\n\n  let line = 0;\n\n  if (processedText[line] === '') {\n    ++line;\n  }\n\n  // Process first line which is of the generic format \"honortific name\n  // permalink\" locate name on first line\n  const fullName = processedText[line].slice(0, processedText[line].indexOf('permalink') - 1);\n\n  // create new actor\n  const actor = await Actor.create({ name: fullName, type: 'traveller' });\n\n  line += 2; // skip to age, gender, stat line\n\n  // break up third line\n  const ageGenStats = processedText[line].split('\\t');\n  const age = parseInt(ageGenStats[0]);\n  const gender = ageGenStats[1];\n\n  // Enter basic character data\n  await actor.update({\n    'system.name': fullName,\n    'name': fullName,\n    'system.age.value': age,\n    'system.gender': gender,\n    'system.species': 'Human'\n  });\n\n  // define characteristic order for UPP\n  const uppOrder = ['strength', 'dexterity', 'endurance', 'intelligence', 'education', 'socialStanding'];\n\n  let charId = '';\n  // enter characteristic values\n  for (let i = 0; i < Math.min(ageGenStats.length - 2, uppOrder.length); ++i) {\n    charId = 'system.characteristics.' + uppOrder[i] + '.value';\n    const statVal = ageGenStats[i + 2].slice(0, ageGenStats[i + 2].indexOf('(') - 1);\n    await actor.update({ [charId]: parseInt(statVal) });\n  }\n  ++line;\n\n  // add description\n  await actor.update({ 'system.description': processedText[line] });\n\n  // Skip to start of skills list\n  do {\n    ++line;\n  } while (processedText[line].indexOf('Skills') < 0);\n  ++line;\n\n  // Process and add skills\n  const skillsPack = await game.packs.get('twodsix.twoe-skills').getDocuments();\n\n  while (processedText[line].indexOf('Career') < 0 && line < processedText.length) {\n    const skillLevel =\n        parseInt(processedText[line][processedText[line].length - 1]);\n    const skillName =\n        processedText[line].slice(0, processedText[line].length - 2);\n\n    if (skillName !== '') {\n      // Convert skill name to 2e compendium format\n      let adjName = '';\n      if (skillName.indexOf('(') >= 0) {\n        adjName = skillName.replace(' (', ': ');\n        adjName = adjName.slice(0, -1);\n      } else {\n        adjName = skillName;\n      }\n\n      // look for skill in compendium\n      const skillItem = await skillsPack.find(s => s.name === adjName && s.type === 'skills');\n\n      if (skillItem == null) {\n        const skillData = { name: adjName, type: 'skills' };\n        await actor.createEmbeddedDocuments('Item', [skillData]);\n      } else {\n        await actor.createEmbeddedDocuments('Item', [skillItem]);\n      }\n\n      // find added skill item on actor\n      const newItem = await actor.items.find(item => item.name === adjName);\n\n      // update level\n      await newItem.update(\n        { 'system.value': skillLevel, 'system.characteristic': 'NONE' });\n    }\n    ++line;\n  }\n\n  // process career table\n  let bio = `<p>Careers:</p><table style=\"width:100%;\">`;\n\n  while (processedText[line].indexOf('History') < 0 &&\n         processedText[line].indexOf('Education') < 0) {\n    bio += genTableRowHTML(processedText[line], 'Career');\n    ++line;\n  }\n\n  // process education if exists\n  if (processedText[line].indexOf('Education') >= 0) {\n    bio += `</table><br><p>Education:</p><table style=\"width:100%;\">`;\n    while (processedText[line].indexOf('History') < 0) {\n      bio += genTableRowHTML(processedText[line], 'Education');\n      ++line;\n    }\n  }\n\n  // Add character event log to bio\n  bio += `</table><br><p>Career History:</p><table style=\"width:100%;\">`;\n\n  while (processedText[line].indexOf('\\t') >= 0) {\n    bio += genTableRowHTML(processedText[line], 'Term');\n    ++line;\n    if (processedText[line] === undefined) {\n      break;\n    }\n  }\n  bio += `</table><br>`;\n\n  await actor.update({ 'system.bio': bio });\n\n  // Show new actor\n  actor.sheet.render(true);\n}\n\nfunction genTableRowHTML (rowText, headerText) {\n  if (rowText.indexOf('\\t') < 0) {\n    return ('');\n  }\n\n  const parsedLine = rowText.split('\\t');\n  let returnText = '<tr>';\n  for (let i = 0; i < parsedLine.length; ++i) {\n    if (parsedLine[0].indexOf(headerText) >= 0) {\n      returnText +=\n          '<th style=\"text-align:center\">' + parsedLine[i].trim() + '</th>';\n    } else {\n      returnText +=\n          '<td style=\"text-align:center\">' + parsedLine[i].trim() + '</td>';\n    }\n  }\n  returnText += '</tr>';\n  return (returnText);\n}","flags":{"core":{"sourceId":"Macro.4ux6vp9OsP9RqBBl"},"cf":{"id":"temp_f2ldg9aw4y"}},"ownership":{"default":0,"GOmBKof9PfoHZ54T":3,"OIomk1IgyRly5ocC":3},"_stats":{"systemId":"twodsix","systemVersion":"1.45.2","coreVersion":"10.272","createdTime":1657744135905,"modifiedTime":1657744135905,"lastModifiedBy":"OIomk1IgyRly5ocC"},"folder":null,"sort":0,"_id":"GsvOnW0juwgt1vJD"}
{"_id":"HWU3NBJ6EypWuAJg","name":"Critical - Starship","type":"script","author":"msuh6wePTuFs4VOF","img":"icons/svg/explosion.svg","scope":"global","command":"let compendiumTables = await game.packs.get(\"twodsix.cepheus-deluxe-tables\").getDocuments();\nlet table = await compendiumTables.find(o => o.name === \"Critical - Starship\");\nlet result = await table.draw();","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"core":{"sourceId":"Macro.2wp1RB1XaOIEUgOd"},"cf":{"id":"temp_yxfg7c9wgej"}}}
{"_id":"IIIorheuGQ9QI3Wa","name":"Critical - Craft","type":"script","author":"msuh6wePTuFs4VOF","img":"icons/svg/explosion.svg","scope":"global","command":"let compendiumTables = await game.packs.get(\"twodsix.cepheus-deluxe-tables\").getDocuments();\nlet table = await compendiumTables.find(o => o.name === \"Critical - Craft\");\nlet result = await table.draw();","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"core":{"sourceId":"Macro.2wp1RB1XaOIEUgOd"},"cf":{"id":"temp_yxfg7c9wgej"}}}
{"_id":"JNQ5EiQyC6q1kHwd","name":"Surface Hit - Craft","type":"script","author":"msuh6wePTuFs4VOF","img":"systems/twodsix/assets/icons/components/hull.svg","scope":"global","command":"let compendiumTables = await game.packs.get(\"twodsix.cepheus-deluxe-tables\").getDocuments();\nlet table = await compendiumTables.find(o => o.name === \"Surface Hit - Craft\");\nlet result = await table.draw();","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"core":{"sourceId":"Macro.2wp1RB1XaOIEUgOd"},"cf":{"id":"temp_yxfg7c9wgej"}}}
{"_id":"Qe55Wd3Tv24Qg5b0","name":"Surface Hit - Starship","type":"script","author":"msuh6wePTuFs4VOF","img":"systems/twodsix/assets/icons/components/hull.svg","scope":"global","command":"let compendiumTables = await game.packs.get(\"twodsix.cepheus-deluxe-tables\").getDocuments();\nlet table = await compendiumTables.find(o => o.name === \"Surface Hit - Starship\");\nlet result = await table.draw();","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"core":{"sourceId":"Macro.2wp1RB1XaOIEUgOd"},"cf":{"id":"temp_yxfg7c9wgej"}}}
{"_id":"QhlWBmRJQXCQiolR","name":"Heal for GM or Player","type":"script","author":"GOmBKof9PfoHZ54T","img":"systems/twodsix/assets/icons/heart-plus.svg","scope":"global","command":"/* eslint-disable no-undef */\n/* eslint-disable semi */\nconst MULTIPLIER = 1.0;\nconst patients = game.user.targets;\nlet doctor = null;\n\n// For player, select doctor from their primary owned character\n// eslint-disable-next-line no-undef\nif (game.user.isGM !== true) {\n  const character = game.actors.filter(a => a.data.permission[game.userId] === CONST.ENTITY_PERMISSIONS.OWNER && !!a.getActiveTokens()[0])[0].data;\n\n  if (character != null) {\n    const charID = character._id;\n    doctor = game.actors.get(charID);\n  }\n} else {\n  // For GM, select doctor as the selected token\n    if (token !== undefined) {\n      // eslint-disable-next-line no-undef\n      doctor = token.actor;\n      //console.log(doctor);\n      //console.log(canvas.tokens._controlled);\n    }\n}\n\n// Heal if doctor and patients are defined\nif (doctor !== null && patients !== null) {\n  for (const patient of patients) {\n    await healCharacter(doctor, game.actors.get(patient.data.actorId));\n  }\n}\n\nasync function healCharacter (healer, patient) {\n  console.log('Healer: ', healer);\n  console.log('Patient: ', patient);\n\n  // Check that doctor has Medicine skill\n  const medSkill = healer.items.find(item => item.name === 'Medicine');\n\n  // Check that doctor has Medkit or Medical Kit\n  let medKit = healer.items.find(item => item.name === 'Medkit');\n  if (medKit == null) {\n    medKit = healer.items.find(item => item.name === 'Medical Kit');\n  }\n\n  if (medSkill !== null && medKit != null) {\n    // Have player roll medicine check\n    const healRoll = await medSkill.skillRoll(true);\n\n    if (healRoll === undefined) { return; }\n\n    let pointsToHeal = healRoll.effect * MULTIPLIER;\n\n    patient.healActor(pointsToHeal);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"KrOiJLcZ94d4ZOL3":3,"GOmBKof9PfoHZ54T":3},"flags":{"core":{"sourceId":"Macro.f3bsdD0dXQcWdHaW"},"cf":{"id":"temp_4phcz5md1kh"}}}
{"name":"Cepheus Deluxe Galaxy Importer v10","type":"script","author":"OIomk1IgyRly5ocC","img":"systems/twodsix/assets/icons/StarportA.svg","scope":"global","command":"// Simple subsector generator based on information from Cepheus Deluxe & Cepheus Deluxe Galaxy\n// using the generator https://www.drivethrurpg.com/product/377266/Cepheus-Deluxe-Galaxy\n// Fields used\n// 1: Name\n// 2: HexNbr\n// 3-10: UWP\n// 13: Bases\n// 12: Zone\n// 14: Gas Giants?\nconst gridSize = 100;\n\ntranslateCode();\n\nasync function translateCode () {\n  let topLabel = '';\n  const value = await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: 'Enter Subsector Text Block',\n      content: `<label>Enter subsector block</label><textarea type=\"text\" name=\"input\" cols=\"40\" rows=\"5\"></textarea>`,\n      buttons: {\n        uwp: {\n          label: 'UWP',\n          callback: (html) => { resolve(html.find('[name=\"input\"]')[0].value); topLabel = 'UWP'; }\n        },\n        tradeCodes: {\n          label: 'Trade Codes',\n          callback: (html) => { resolve(html.find('[name=\"input\"]')[0].value); topLabel = 'Trade'; }\n        }\n      }\n    }).render(true);\n  });\n\n  if (value !== '') {\n    // parse input text block into lines\n    const processedText = value.split('\\n');\n\n    const newNotes = [];\n    let newDrawings = [];\n    let newTiles = [];\n    const maxX = 700;\n    const maxY = 1000;\n\n    // new journal entry\n    const newJournal = await JournalEntry.create({\n      name: \"New Subsector\"\n    });\n\n    // add new journal entries, notes, and drawing text for each planet\n    for (let i = 0; i < processedText.length; ++i) {\n      const parse = parseCode(processedText[i]);\n      const planetData = await newPlanet(parse, newJournal, topLabel);\n      newNotes.push(planetData.note);\n      newTiles = newTiles.concat(planetData.returnTiles);\n      newDrawings = newDrawings.concat(planetData.returnDrawing);\n    }\n\n    Scene.create({\n      name: 'Temp Scene',\n      active: false,\n      navigation: true,\n      backgroundColor: '#000000',\n      gridColor: '#c4c4c4',\n      grid: gridSize,\n      gridType: CONST.GRID_TYPES.HEXEVENQ,\n      notes: newNotes,\n      drawings: newDrawings,\n      initial: {x: Math.round(maxX / 2), y: Math.round(maxY / 2), scale: 0.8},\n      tiles: newTiles,\n      padding: 0.05,\n      width: maxX,\n      height: maxY\n    });\n  }\n}\n\nasync function newPlanet (parse, newJournal, topLabel) {\n  const addedPlanet = await newJournal.createEmbeddedDocuments(\"JournalEntryPage\",[{\n    name: parse.planetName,\n    text: {content: parse.text}\n  }]);\n\n  // Calculate pixel position of items to display\n  const lrgFontSize = 12;\n  const smFontSize = lrgFontSize - 2;\n  const iconSize = 34;\n  const iconPos = getPixelFromHex(parse.col, parse.row);\n  const yOffset = 0.5 * iconSize + 0.7 * lrgFontSize;\n\n  // Pick top label to use\n  let topText = '';\n  if (topLabel === 'UWP') {\n    topText = parse.UWP;\n  } else {\n    topText = parse.tCodes;\n  }\n\n  // Pick planet icon\n  let planetIcon = 'systems/twodsix/assets/icons/Starport' + parse.UWP[0] + '.svg';\n  if (parse.UWP[1] === '0') {\n    planetIcon = 'systems/twodsix/assets/icons/asteroid-' + parse.UWP[0] + '.svg';\n  }\n\n  // generate note and drawing objects\n  // add note and icon\n  const returnNote = {\n    entryId: newJournal.id,\n    pageId: addedPlanet[0].id,\n    text: '-',\n    fontSize: smFontSize,\n    textAnchor: CONST.TEXT_ANCHOR_POINTS.CENTER,\n    x: iconPos.x,\n    y: iconPos.y,\n    icon: planetIcon,\n    iconSize: iconSize,\n    iconTint: parse.color,\n    width: smFontSize + 2,\n    height: smFontSize + 2,\n    strokeWidth: 0\n  };\n\n  // add color for Zone\n  let zoneColor = '#ffffff';\n  switch (parse.zone) {\n    case 'A':\n      zoneColor = '#cc9a06';\n      break;\n    case 'R':\n      zoneColor = '#ff0000';\n      break;\n  }\n\n  // add planet name\n  const returnDrawing = [{\n    x: Math.round(iconPos.x - measureText(parse.planetName, lrgFontSize)/2 - 1),\n    y: Math.round(iconPos.y + yOffset - lrgFontSize/2 - 1),\n    z: 20,\n    t: CONST.DRAWING_TYPES.TEXT,\n    text: abbreviatedName(parse.planetName),\n    textColor: zoneColor,\n    fontSize: lrgFontSize,\n    width: measureText(parse.planetName, lrgFontSize) + 2,\n    height: lrgFontSize + 2,\n    textColor: zoneColor,\n    strokeWidth: 0,\n    strokeColor: \"#000000\"\n  },\n\n  // add UWP or trade codes\n  {\n    text: topText,\n    x: Math.round(iconPos.x - measureText(topText, smFontSize)/2 - 1),\n    y: Math.round(iconPos.y - yOffset - smFontSize/2 - 1),\n    z: 20,\n    width: measureText(topText, smFontSize) + 2,\n    height: smFontSize + 2,\n    t: CONST.DRAWING_TYPES.TEXT,\n    textColor: '#ffffff',\n    fontSize: smFontSize,\n    strokeWidth: 0,\n    strokeColor: \"#000000\"\n  }];\n\n  // add gas giant or base markers if applicable\n  const returnTiles = [];\n  for (let i = 0; i < parse.markers.length; ++i) {\n    returnTiles.push({\n      x: Math.round(iconPos.x + iconSize / 2 + smFontSize / 4),\n      y: Math.round(iconPos.y + smFontSize * (i - 0.5 * parse.markers.length)),\n      z: 20,\n      t: CONST.DRAWING_TYPES.RECTANGLE,\n      width: smFontSize,\n      height: smFontSize,\n      tint: '#d6d6d6',\n      img: 'systems/twodsix/assets/icons/' + getMarkerIcon(parse.markers[i])\n    });\n  }\n\n  // add planet icon again incase notes are turned off\n  returnTiles.push({\n    x: Math.round(iconPos.x - iconSize / 2),\n    y: Math.round(iconPos.y - iconSize / 2),\n    z: 20,\n    t: CONST.DRAWING_TYPES.RECTANGLE,\n    width: iconSize,\n    height: iconSize,\n    tint: parse.color,\n    img: planetIcon\n  });\n\n  return ({ note: returnNote, returnDrawing: returnDrawing, returnTiles: returnTiles });\n}\n\nfunction getMarkerIcon (textSymbol) {\n  switch (textSymbol) {\n    case 'N':\n      return ('star-formation.svg');\n    case 'P':\n      return ('pirate-skull.svg');\n    case 'S':\n      return ('scout-ship.svg');\n    case 'G':\n      return ('jupiter.svg');\n    default:\n      return ('perspective-dice-six-faces-random.svg');\n  }\n}\n\nfunction getPixelFromHex (col, row) {\n  const width = gridSize;\n  const sqrt3 = Math.sqrt(3.0);\n  //Add +1 offset due to needing non-zero Padding\n  const xPixel = Math.round((0.75 * (col + 1) + 0.5) * width);\n  const yPixel = Math.round(((row + 1) + 0.5 * ((col + 1) & 1) + 0.5) * sqrt3 / 2.0 * width);\n\n  return ({\n    x: xPixel,\n    y: yPixel\n  });\n}\n\nfunction parseCode (profile) {\n  const parsedLine = profile.split('\\t');\n  \n  // Remove first element of array if a tab\n  if (parsedLine[0] === '' || parsedLine[0] === '>') {\n    parsedLine.shift();\n  }\n\n  const planetName = parsedLine[0].trim();\n  const column = Number(parsedLine[1].substring(0, 2));\n  const row = Number(parsedLine[1].substring(2, 4));\n\n  const UWP = parsedLine.slice(2, 10).join('');\n  const bases = parsedLine[12];\n  let retZone = parsedLine[11][0];\n\n  const UWPtables = [\n    'Starport Type', 'World Size - CL', 'Atmosphere', 'Hydrographics',\n    'Population', 'Government', 'Law Level - CL', 'Tech Level - CL'\n  ];\n  let planetDescrip = `<table style=\"width:100%;\"><tbody><tr><th style=\"width:20%;\">Characteristic</th><th style=\"width:70%;\">Description</th></tr>`;\n  // parse starport, this is non-numeric\n  planetDescrip += `<tr><td style=\"padding-right:5px\">${UWPtables[0]} (${UWP[0]})</td><td>${getStarportDescr(UWP[0])}</td></tr>`;\n\n  // process rest of UWP\n  for (let i = 1; i < Math.min(profile.length, UWPtables.length); i++) {\n    planetDescrip += `<tr>${getUWPparameter(UWP[i], UWPtables[i])}</tr>`;\n  }\n\n  // generate trade codes\n  const trData = getTradeCodes(UWP);\n  planetDescrip += trData.text;\n  planetDescrip += `</tbody></table>`;\n\n  // set zone color\n  if (retZone === ' ') { retZone = trData.zone; }\n\n  // add base and gas giant codes\n  const markers = [];\n  if (parsedLine[13] === 'Y') {\n    console.log(\"Found GG\");\n    markers.push('G');\n  }\n  switch (bases) {\n    case 'N':\n      markers.push('N');\n      break;\n    case 'S':\n      markers.push('S');\n      break;\n    case 'P':\n      markers.push('P');\n      break;\n    case 'A':\n      markers.push('N');\n      markers.push('S');\n      break;\n    case 'G':\n      markers.push('S');\n      markers.push('P');\n      break;\n  }\n\n  return ({ planetName: planetName, col: column, row: row, UWP: UWP, text: planetDescrip, color: trData.color, tCodes: trData.tCodes, markers: markers, zone: retZone });\n}\n\n// Lookup a hex digit from a roll table\nfunction getUWPparameter (value, tableName) {\n  const item = hexToBase10(value);\n  const table = game.tables.contents.find(t => t.name === tableName);\n\n  if (item < table.results.size) {\n    const details = table.results._source[item].text;\n    return (`<td style=\"padding-right:5px\">${tableName} (${value})</td><td>${details}</td>`);\n  } else {\n    return (`<td style=\"padding-right:5px\">${tableName} (${value})</td><td>UNKNOWN TABLE ITEM</td>`);\n  }\n}\n\n// Convert hex value to base10\nfunction hexToBase10 (value) {\n  switch (value.toUpperCase()) {\n    case 'A':\n      return (10);\n    case 'B':\n      return (11);\n    case 'C':\n      return (12);\n    case 'D':\n      return (13);\n    case 'E':\n      return (14);\n    case 'F':\n      return (15);\n    case 'G':\n      return (16);\n    default:\n      return (parseInt(value));\n  }\n}\n\n// Lookup starport description (letter values that are not hex)\nfunction getStarportDescr (value) {\n  let rtext = '';\n  switch (value.toUpperCase()) {\n    case 'A':\n      rtext =\n        'Excellent Quality. Refined fuel and annual maintenance overhaul available. Shipyard capable of constructing starships and non-starships present.';\n      break;\n    case 'B':\n      rtext =\n        'Good Quality. Refined fuel and annual maintenance overhaul available. Shipyard capable of constructing non-starships present.';\n      break;\n    case 'C':\n      rtext =\n        'Routine Quality. Only unrefined fuel available. Reasonable repair facilities present.';\n      break;\n    case 'D':\n      rtext =\n        'Poor Quality. Only unrefined fuel available. No repair facilities present.';\n      break;\n    case 'E':\n      rtext =\n        'Frontier Installation. Essentially a marked spot of bedrock with no fuel, facilities, or bases present.';\n      break;\n    case 'X':\n      rtext = 'No Starport. No provision is made for any ship landings.';\n      break;\n    default:\n      rtext = 'Unknown';\n  }\n  return (rtext);\n}\n\n// Generate Trade Codes per Cepheus Light Rules\nfunction getTradeCodes (profile) {\n  let rtext = '';\n  let rCode = '';\n  let rColor = '#ffffff';\n  let zText = '';\n\n  if (profile.length < 8) {\n    rtext += 'UWP Code too short</td></tr>';\n  } else {\n    const size = hexToBase10(profile[1]);\n    const atmo = hexToBase10(profile[2]);\n    const hydro = hexToBase10(profile[3]);\n    const pop = hexToBase10(profile[4]);\n    const gov = hexToBase10(profile[5]);\n    const law = hexToBase10(profile[6]);\n    const techL = hexToBase10(profile[7]);\n\n    if (atmo > 3 && atmo < 10 && hydro > 3 && hydro < 9 && pop > 4 && pop < 8) {\n      rtext += 'Ag - Agricultural, ';\n      rCode += 'Ag\\xa0';\n    }\n\n    if (size === 0 && atmo === 0 && hydro === 0) {\n      rtext += 'As - Asteroid, ';\n      rCode += 'As\\xa0';\n    }\n\n    if (pop === 0) {\n      rtext += 'Ba - Barren, ';\n      rCode += 'Ba\\xa0';\n      rColor = '#999999';\n    }\n\n    if (atmo > 1 && hydro === 0) {\n      rtext += 'De - Desert, ';\n      rCode += 'De\\xa0';\n      rColor = '#cc8800';\n    }\n\n    if (atmo > 9 && hydro > 0) {\n      rtext += 'Fl - Non-water Fluid Oceans, ';\n      rCode += 'Fl\\xa0';\n      rColor = '#ff6600';\n    }\n\n    if ((atmo === 5 || atmo === 6 || atmo === 8) && hydro > 3 && hydro < 10 && pop > 3 && pop < 9) {\n      rtext += 'Ga - Garden, ';\n      rCode += 'Ga\\xa0';\n      rColor = '#009900';\n    }\n\n    if (pop > 8) {\n      rtext += 'Hi - High Population, ';\n      rCode += 'Hi\\xa0';\n    }\n\n    if (techL > 11) {\n      rtext += 'Ht - High Technology, ';\n      rCode += 'Ht\\xa0';\n    }\n\n    if (atmo < 2 && hydro > 0) {\n      rtext += 'Ic - Ice Capped, ';\n      rCode += 'Ic\\xa0';\n      rColor = '#ccccff';\n    }\n\n    if ((atmo < 3 || atmo === 4 || atmo === 7 || atmo === 9) && pop > 8) {\n      rtext += 'In - Industrial, ';\n      rCode += 'In\\xa0';\n    }\n\n    if (pop > 0 && pop < 4) {\n      rtext += 'Lo - Low Population, ';\n      rCode += 'Lo\\xa0';\n    }\n\n    if (techL < 6) {\n      rtext += 'Lt - Low Technology, ';\n      rCode += 'Lt\\xa0';\n    }\n\n    if (atmo < 4 && hydro < 4 && pop > 5) {\n      rtext += 'Na - Non Agricultural, ';\n      rCode += 'Na\\xa0';\n    }\n\n    if (pop > 3 && pop < 7) {\n      rtext += 'Ni - Non Industrial, ';\n      rCode += 'Ni\\xa0';\n    }\n\n    if (atmo > 1 && atmo < 6 && hydro < 4) {\n      rtext += 'Po - Poor, ';\n      rCode += 'Po\\xa0';\n    }\n\n    if ((atmo === 6 || atmo === 8) && pop > 5 && pop < 9) {\n      rtext += 'Ri - Rich, ';\n      rCode += 'Ri\\xa0';\n    }\n\n    if (hydro === 10) {\n      rtext += 'Wa - Water World, ';\n      rCode += 'Wa\\xa0';\n      rColor = '#3366cc';\n    }\n\n    if (atmo === 0) {\n      rtext += 'Va - Vacuum, ';\n      rCode += 'Va\\xa0';\n    }\n    // Get rid of extra coma and space\n    if (rtext.length > 0) {\n      rtext = rtext.slice(0, -2);\n    }\n    rtext += '</td></tr>';\n    // get rid of extra comma\n    if (rCode.length > 0) {\n      rCode = rCode.slice(0, -1);\n    }\n\n    if (atmo > 9 || (gov === 0 || gov === 7 || gov === 10) || (law === 0 || law > 8)) {\n      zText = 'A';\n    }\n  }\n\n  return ({ text: `<tr><td \"padding-right:5px\">Trade Codes</td><td>${rtext}`, color: rColor, tCodes: rCode, zone: zText });\n}\n\nfunction abbreviatedName (planetName) {\n  const parsedName = planetName.split(\" \");\n\n  if (parsedName.length > 1) {\n    return parsedName[0] + \"...\";\n  } else {\n    return parsedName[0];\n  }\n}\n\n//from https://www.codegrepper.com/code-examples/javascript/calculate+width+of+text+javascript\nfunction measureText(str, fontSize = 10) {\n  const widths = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2796875,0.2765625,0.3546875,0.5546875,0.5546875,0.8890625,0.665625,0.190625,0.3328125,0.3328125,0.3890625,0.5828125,0.2765625,0.3328125,0.2765625,0.3015625,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.2765625,0.2765625,0.584375,0.5828125,0.584375,0.5546875,1.0140625,0.665625,0.665625,0.721875,0.721875,0.665625,0.609375,0.7765625,0.721875,0.2765625,0.5,0.665625,0.5546875,0.8328125,0.721875,0.7765625,0.665625,0.7765625,0.721875,0.665625,0.609375,0.721875,0.665625,0.94375,0.665625,0.665625,0.609375,0.2765625,0.3546875,0.2765625,0.4765625,0.5546875,0.3328125,0.5546875,0.5546875,0.5,0.5546875,0.5546875,0.2765625,0.5546875,0.5546875,0.221875,0.240625,0.5,0.221875,0.8328125,0.5546875,0.5546875,0.5546875,0.5546875,0.3328125,0.5,0.2765625,0.5546875,0.5,0.721875,0.5,0.5,0.5,0.3546875,0.259375,0.353125,0.5890625]\n  const avg = 0.5279276315789471\n  return str\n    .split('')\n    .map(c => c.charCodeAt(0) < widths.length ? widths[c.charCodeAt(0)] : avg)\n    .reduce((cur, acc) => acc + cur) * fontSize\n}","flags":{"core":{"sourceId":"Macro.WDeuBngc2e4Q9yF5"},"cf":{"id":"temp_906dhz6xyps"}},"ownership":{"default":0,"GOmBKof9PfoHZ54T":3,"OIomk1IgyRly5ocC":3},"_stats":{"systemId":"twodsix","systemVersion":"1.45.2","coreVersion":"10.272","createdTime":1657742871202,"modifiedTime":1657742871202,"lastModifiedBy":"OIomk1IgyRly5ocC"},"folder":null,"sort":0,"_id":"RdKZd1h53HxVXXBg"}
{"_id":"TrvfjMd5YTAD8vnr","name":"#[CF_tempEntity]","type":"chat","author":"GOmBKof9PfoHZ54T","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"GOmBKof9PfoHZ54T":3},"flags":{"cf":{"id":"temp_4phcz5md1kh","folderPath":[],"color":"#000000","fontColor":"#FFFFFF","name":"Healing","children":[],"icon":"","sorting":"a","contents":["qvEzYThjl4ULKLwt","QhlWBmRJQXCQiolR"],"version":"2.4.6"}}}
{"name":"CL Character Importer v10","type":"script","author":"OIomk1IgyRly5ocC","img":"icons/svg/down.svg","scope":"global","command":"/* eslint-disable no-undef */\n/* eslint-disable semi */\n// Take text block from https://cepheuslightgen.herokuapp.com/ and translate\n// into a Cepheus Light character\n// For Foundry VTT version 0.8+\ngetInputText();\n\n// Get text block and process\nasync function getInputText () {\n  // Get Input\n  const rawText = await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: `Copy and paste text for a single character`,\n      content:\n          `<label>Must select just the character block</label><textarea type=\"text\" name=\"input\" cols=\"40\" rows=\"5\"></textarea>`,\n      buttons: {\n        OK: {\n          label: `Process`,\n          callback:\n              (html) => { resolve(html.find('[name=\"input\"]')[0].value); }\n        }\n      }\n    }).render(true);\n  });\n\n  // Abort if no text entered\n  if (rawText.length === 0) {\n    return;\n  }\n\n  // split input into lines of text\n  const processedText = rawText.split('\\n');\n  let line = 0;\n\n  // break up first line which is of the generic format \"honorific name(s) UPP\n  // Age #\"\n  const posAge = processedText[line].indexOf('Age');\n  const age = parseInt(processedText[line].slice(posAge + 4));\n  const upp = processedText[line].slice(posAge - 8, posAge - 2).trim();\n  const fullName = processedText[line].slice(0, posAge - 9).trim();\n\n  // create new actor\n  const actor = await Actor.create({ name: fullName, type: 'traveller' });\n\n  ++line;\n\n  // process second line which is the homeworld\n  const homeworld =\n      processedText[line].slice(processedText[line].indexOf(':') + 2);\n  ++line;\n\n  // Process third line which is of the generic format \"careers(terms)  Cr#\"\n  const posCr = processedText[line].indexOf('Cr');\n\n  const credits = parseInt(processedText[line].slice(posCr + 2));\n  let cash = 0;\n  let debt = 0;\n  if (credits >= 0) {\n    cash = credits;\n  } else {\n    debt = -credits;\n  }\n\n  let bio = '<p>Career(s): ' + processedText[line].slice(0, posCr - 3) + '</p>';\n\n  // Enter basic character data\n  await actor.update({\n    'system.name': fullName,\n    'name': fullName,\n    'system.age.value': age,\n    'system.finances.cash': cash,\n    'system.finances.debt': debt,\n    'system.bio': bio,\n    'system.homeWorld': homeworld\n  });\n\n  // define characteristic order for UPP\n  const uppOrder = [\n    'strength', 'dexterity', 'endurance', 'intelligence', 'education',\n    'socialStanding'\n  ];\n\n  let charId = '';\n  // enter characteristic values\n  for (let i = 0; i < Math.min(upp.length, uppOrder.length); ++i) {\n    charId = 'system.characteristics.' + uppOrder[i] + '.value';\n    await actor.update({ [charId]: hexToBase10(upp[i]) });\n  }\n\n  // Open Compendium\n  const pack = await game.packs.get('twodsix.cepheus-light-items').getDocuments();\n  const itemsToAdd = [];\n\n  // Jump to muster out benefits\n  line += 2;\n  if (processedText[line] !== '') {\n    bio += '<p>Muster Out Benefits: ' + processedText[line] + '</p>';\n\n    // Try to add items from benefits\n    const itemList = processedText[line].split(', ');\n\n    for (let i = 0; i < itemList.length; ++i) {\n      let benefit = itemList[i].slice(0, itemList[i].lastIndexOf('x') - 1).trim();\n      benefit = compendiumErrors(benefit);\n\n      let newItem = await pack.find(s => s.name === benefit)?.toObject();\n\n      if (newItem) {\n        const quant = parseInt(itemList[i].slice(itemList[i].lastIndexOf('x') + 1));\n        newItem.system.quantity = quant;\n        itemsToAdd.push(Object.assign({}, newItem));\n      }\n    }\n  }\n\n  line += 2;\n\n  // generate array of skill-level pairs\n  let cleanSkills = processedText[line].trim(); // get rid of extra whitespace\n  if (cleanSkills[cleanSkills.length - 1] ===\n      ',') { // Get rid of end of string ',' if present\n    cleanSkills = cleanSkills.slice(0, -1);\n  }\n  const skillsList = cleanSkills.split(\n    ', '); // make an array of individual skill-level entries\n\n  // Process skills list\n  for (let i = 0; i < skillsList.length; ++i) {\n    const skillPair = skillsList[i].trim();\n    let skillName = skillPair.slice(0, skillPair.length - 2).trim();\n    const skillLevel = parseInt(skillPair.slice(skillPair.length - 2));\n\n    let skillItem = await pack.find(s => s.name === skillName && s.type === 'skills')?.toObject();\n    \n    // Try to correct a null skillItem\n    if (!skillItem) {\n      skillName = compendiumErrors(skillName);\n      skillItem = await pack.find(s => s.name === skillName && s.type === 'skills')?.toObject();\n    }\n\n    // Add new skill\n    if (skillItem) {\n      skillItem.system.value = skillLevel;\n      //skillItem.system.characteristic =  'NONE';\n      //skillItem.system.name = skillItem.name;\n      itemsToAdd.push(Object.assign({}, skillItem));\n    } else {\n      bio += '<p>Unknown skill: ' + skillsList[i] + '</p>';\n    }\n  }\n  await actor.createEmbeddedDocuments('Item', itemsToAdd);\n  await actor.update({ 'system.bio': bio });\n\n  // Show new actor\n  actor.sheet.render(true);\n}\n\n// Convert hex value to base10\nfunction hexToBase10 (value) {\n  switch (value.toUpperCase()) {\n    case 'A':\n      return ('10');\n    case 'B':\n      return ('11');\n    case 'C':\n      return ('12');\n    case 'D':\n      return ('13');\n    case 'E':\n      return ('14');\n    case 'F':\n      return ('15');\n    case 'G':\n      return ('16');\n    default:\n      return (value);\n  }\n}\n\nfunction compendiumErrors (skillName) {\n  switch (skillName) {\n    case 'Leader':\n      return ('Leadership');\n    case 'Survival':\n      return ('Survival ');\n    case 'Piercing Weapons':\n      return ('Melee Weapons (Piercing Weapons)');\n    case 'Jack-o-Trades':\n      return ('Jack-of-All-Trades');\n    case 'Jack o\\' Trades':\n      return ('Jack-of-All-Trades');\n    case 'Melee Combat':\n      return ('Melee');\n    case 'Demolitions':\n      return ('Demolition / Explosives');\n    case 'Autopistol':\n      return ('Auto Pistol');\n    case 'Carousing':\n      return ('Carouse');\n    case 'Computer':\n      return ('Computers');\n    case 'Administration':\n      return ('Admin');\n    case 'Investigation':\n      return ('Investigate');\n    case 'Grav Vehicle':\n      return ('Grav Vehicles');\n    case 'Great Axe':\n      return ('Axe');\n    case 'Vibro-Blade':\n      return ('Vibro-blade');\n    default:\n      return (skillName);\n  }\n}","flags":{"core":{"sourceId":"Macro.FSdELypGtTixFVv5"},"cf":{"id":"temp_f2ldg9aw4y"}},"ownership":{"default":0,"msuh6wePTuFs4VOF":3,"OIomk1IgyRly5ocC":3},"_stats":{"systemId":"twodsix","systemVersion":"1.45.2","coreVersion":"10.272","createdTime":1657744444957,"modifiedTime":1657744444957,"lastModifiedBy":"OIomk1IgyRly5ocC"},"folder":null,"sort":0,"_id":"aFZ84AHSyz6V9PhY"}
{"_id":"bNgEe8Bpck2sn0aj","name":"#[CF_tempEntity]","type":"chat","author":"msuh6wePTuFs4VOF","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"cf":{"id":"temp_f505ax12at","folderPath":[],"color":"#000000","fontColor":"#FFFFFF","name":"Misc","children":[],"icon":"","sorting":"a","contents":["4d9MaEr7rJdWS1NY","ppvNcdMs92boD2XJ"],"version":"2.4.6"}}}
{"_id":"br5PEP49wuJMZKxU","name":"#[CF_tempEntity]","type":"chat","author":"GOmBKof9PfoHZ54T","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"GOmBKof9PfoHZ54T":3},"flags":{"cf":{"id":"temp_906dhz6xyps","folderPath":[],"color":"#000000","fontColor":"#FFFFFF","name":"Subsector Importers","children":[],"icon":"","sorting":"a","contents":["lgAMuZjjXCC3NhPO","0hQsh5JxHBspDASR","rMR4prZfSnA3PLwX","4WveU3tZfv0IffB5"],"version":"2.4.6"}}}
{"name":"Parser for CE 1001 Characters v10","type":"script","author":"OIomk1IgyRly5ocC","img":"icons/svg/wall-direction.svg","scope":"global","command":"/* eslint-disable no-undef */\n/* eslint-disable semi */\n// Take text block from\n// http://members.ozemail.com.au/~jonoreita/SupplementOne/Cepheus_Engine_1001_characters.html\n// and translate into a character skills must be separated by commas\n\nlet compendium = '';\n\ngetInputText();\n\n// Get text block and process\nasync function getInputText () {\n  // Get Input\n  const rawText = await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: `Copy and paste text for a single character`,\n      content:\n          `<label>Must select comma separated skills</label><textarea type=\"text\" name=\"input\" cols=\"40\" rows=\"5\"></textarea>`,\n      buttons: {\n        CE: {\n          label: `Cepheus Engine`,\n          callback: (html) => {\n            resolve(html.find('[name=\"input\"]')[0].value);\n            compendium = 'CE';\n          }\n        },\n        CEL: {\n          label: `Cepheus Light`,\n          callback: (html) => {\n            resolve(html.find('[name=\"input\"]')[0].value);\n            compendium = 'CL';\n          }\n        }\n      }\n    }).render(true);\n  });\n\n  // Abort if no text entered\n  if (rawText.length === 0) {\n    return;\n  }\n\n  // split input into lines of text\n  const processedText = rawText.split('\\n');\n  let line = 0;\n\n  // Process first line which is of the generic format \"#. honorific name(s)\n  // (gender, species) UPP Age #\"\n\n  // locate key positions on first line\n  let startName = 0;\n\n  if (processedText[line].indexOf('.') !== -1) {\n    startName =\n        processedText[line].indexOf('.') + 2; // Adjust for numbered character\n  }\n  const posOpenParen = processedText[line].indexOf('(');\n  const posCloseParen = processedText[line].indexOf(')');\n  const posAge = processedText[line].indexOf('Age');\n\n  // break up first line\n  const fullName = processedText[line].slice(startName, posOpenParen - 1);\n  const genderSpecies =\n      processedText[line].slice(posOpenParen + 1, posCloseParen).split(' ');\n  let upp = processedText[line].slice(posCloseParen + 2, posAge - 1);\n  upp = upp.replace('-', ''); // remove dash if psionic\n  const age = processedText[line].slice(posAge + 4);\n\n  // create new actor\n  const actor = await Actor.create({ name: fullName, type: 'traveller' });\n\n  ++line;\n\n  // Process second line which is of the generic format \"careers(terms)  Cr#\"\n  const posCr = processedText[line].indexOf('Cr');\n\n  const credits = processedText[line].slice(posCr + 2);\n  let cash = 0;\n  let debt = 0;\n  if (credits >= 0) {\n    cash = credits;\n  } else {\n    debt = -credits;\n  }\n\n  let bio = '<p>Career(s): ' + processedText[line].slice(0, posCr - 3) + '</p>';\n\n  // Enter basic character data\n  await actor.update({\n    'system.name': fullName,\n    'name': fullName,\n    'system.age.value': age,\n    'system.gender': genderSpecies[0],\n    'system.species': genderSpecies[1],\n    'system.finances.cash': cash,\n    'system.finances.debt': debt\n  });\n\n  ++line;\n\n  // Check for traits for non-humans and add to bio\n  if (genderSpecies[1] !== 'Human') {\n    bio += '<p>' + processedText[line] + '</p>';\n    ++line;\n  }\n\n  // define characteristic order for UPP\n  const uppOrder = [\n    'strength', 'dexterity', 'endurance', 'intelligence', 'education',\n    'socialStanding', 'psionicStrength'\n  ];\n\n  let charId = '';\n  // enter characteristic values\n  for (let i = 0; i < Math.min(upp.length, uppOrder.length); ++i) {\n    charId = 'system.characteristics.' + uppOrder[i] + '.value';\n    await actor.update({ [charId]: hexToBase10(upp[i]) });\n  }\n\n  // generate array of skill-level pairs\n  let cleanSkills = processedText[line].trim(); // get rid of extra whitespace\n\n  // Get rid of end of string ',' if present\n  if (cleanSkills[cleanSkills.length - 1] === ',') {\n    cleanSkills = cleanSkills.slice(0, -1);\n  }\n\n  // make an array of individual skill-level entries\n  const skillsList = cleanSkills.split(', ');\n\n  // Open Compendium\n  let packName = '';\n  switch (compendium) {\n    case 'CE':\n      packName = 'twodsix.ce-srd-items';\n      break;\n    case 'CL':\n      packName = 'twodsix.cepheus-light-items';\n      break;\n  }\n  const pack = await game.packs.get(packName).getDocuments();\n\n  // Process skills list\n  for (let i = 0; i < skillsList.length; ++i) {\n    const lastDash = skillsList[i].lastIndexOf('-'); // Some skills have dash in name, so last one is the marker\n    const skillName = skillsList[i].slice(0, lastDash);\n    let skillLevel = skillsList[i].slice(lastDash + 1);\n\n    let adjName = translateSkillName(skillName);\n\n    let skillItem = await pack.find(s => s.name === adjName && s.type === 'skills');\n\n    // Try to correct a null skillItem\n    if (skillItem === null || skillItem === undefined) {\n      adjName = compendiumErrors(skillName);\n      skillItem = await pack.find(s => s.name === adjName && s.type === 'skills');\n    }\n\n    // Add new skill if it doesn't exist, pick higher level to add if it does\n    if (skillItem != null) {\n      let newSkill = await actor.items.find(item => item.name === adjName);\n\n      if (newSkill == null) {\n        await actor.createEmbeddedDocuments('Item', [skillItem]);\n        newSkill = await actor.items.find(item => item.name === adjName);\n      } else {\n        skillLevel = Math.max(skillLevel, newSkill.system.value);\n      }\n\n      await newSkill.update(\n        { 'system.value': skillLevel, 'system.characteristic': 'NONE' });\n    } else {\n      bio += '<p>Unknown skill: ' + skillsList[i] + '</p>';\n    }\n  }\n\n  ++line;\n\n  // Process rest of bio\n\n  // Check for muster out benefits, optional line\n  if (processedText[line] !== 'Character Event Log:') {\n    // Try to add items from benefits\n    const itemList = processedText[line].split(', ');\n\n    for (let i = 0; i < itemList.length; ++i) {\n      const newItem = await pack.find(s => s.name === itemList[i]);\n      if (newItem != null) {\n        await actor.createEmbeddedDocuments('Item', [newItem]);\n      }\n    }\n\n    bio += '<p>Muster Out Benefits: ' + processedText[line] + '</p>';\n    ++line;\n  }\n\n  // Add character event log to bio\n  for (let i = line; i < processedText.length; ++i) {\n    bio += '<p>' + processedText[i] + '</p>';\n  }\n  await actor.update({ 'system.bio': bio });\n\n  // Show new actor\n  actor.sheet.render(true);\n}\n\n// Convert hex value to base10\nfunction hexToBase10 (value) {\n  switch (value.toUpperCase()) {\n    case 'A':\n      return ('10');\n    case 'B':\n      return ('11');\n    case 'C':\n      return ('12');\n    case 'D':\n      return ('13');\n    case 'E':\n      return ('14');\n    case 'F':\n      return ('15');\n    case 'G':\n      return ('16');\n    default:\n      return (value);\n  }\n}\n\n// Convert Abbreviated Skill Name to Full Compendium Name\nfunction translateSkillName (skillName) {\n  switch (skillName) {\n    case 'Grav Vehicle':\n    case 'Rotor Aircraft':\n    case 'Winged Aircraft':\n      switch (compendium) {\n        case 'CE':\n          return ('Aircraft (' + skillName + ')');\n        case 'CL':\n          return ('Aircraft');\n      }\n      break;\n    case 'Farming':\n    case 'Riding':\n    case 'Veterinary Medicine':\n      switch (compendium) {\n        case 'CE':\n          return ('Animals (' + skillName + ')');\n        case 'CL':\n          return ('Animals');\n      }\n      break;\n      // case 'Survival':\n    case 'Archery':\n    case 'Energy Pistol':\n    case 'Energy Rifle':\n    case 'Shotguns':\n    case 'Shotgun':\n    case 'Slug Pistol':\n    case 'Slug Rifle':\n      switch (compendium) {\n        case 'CE':\n          return ('Gun Combat (' + skillName + ')');\n        case 'CL':\n          return ('Gun Combat');\n      }\n      break;\n    case 'Bay Weapons':\n    case 'Heavy Weapons':\n    case 'Screens':\n    case 'Spinal Mounts':\n    case 'Turret Weapons':\n      switch (compendium) {\n        case 'CE':\n          return ('Gunnery (' + skillName + ')');\n        case 'CL':\n          if (skillName === 'Heavy Weapons') {\n            return (skillName);\n          } else {\n            return ('Gunnery');\n          }\n      }\n      break;\n    case 'Bludgeoning Weapons':\n    case 'Natural Weapons':\n    case 'Slashing Weapons':\n    case 'Piercing Weapons':\n      switch (compendium) {\n        case 'CE':\n          return ('Melee Combat (' + skillName + ')');\n        case 'CL':\n          return ('Melee');\n      }\n      break;\n    case 'Life Sciences':\n    case 'Physical Sciences':\n    case 'Social Sciences':\n    case 'Space Sciences':\n      switch (compendium) {\n        case 'CE':\n          return ('Science (' + skillName + ')');\n        case 'CL':\n          return ('Science');\n      }\n      break;\n    case 'Mole':\n    case 'Tracked Vehicle':\n    case 'Wheeled Vehicle':\n      switch (compendium) {\n        case 'CE':\n          return ('Vehicle (' + skillName + ')');\n        case 'CL':\n          return ('Driving');\n      }\n      break;\n    case 'Motorboats':\n    case 'Ocean Ships':\n    case 'Sailing Ships':\n    case 'Submarine':\n      switch (compendium) {\n        case 'CE':\n          return ('Watercraft (' + skillName + ')');\n        case 'CL':\n          return ('Watercraft');\n      }\n      break;\n    case 'Battle Dress':\n      switch (compendium) {\n        case 'CE':\n          return (skillName);\n        case 'CL':\n          return ('Zero-G');\n      }\n      break;\n    case 'Gambling':\n    case 'Carousing':\n      switch (compendium) {\n        case 'CE':\n          return (skillName);\n        case 'CL':\n          return ('Carouse');\n      }\n      break;\n    case 'Computer':\n    case 'Comms':\n      switch (compendium) {\n        case 'CE':\n          return (skillName);\n        case 'CL':\n          return ('Computers');\n      }\n      break;\n    case 'Electronics':\n    case 'Mechanics':\n    case 'Gravitics':\n      switch (compendium) {\n        case 'CE':\n          return (skillName);\n        case 'CL':\n          return ('Repair');\n      }\n      break;\n    case 'Navigation':\n      switch (compendium) {\n        case 'CE':\n          return (skillName);\n        case 'CL':\n          return ('Piloting');\n      }\n      break;\n    case 'Broker':\n    case 'Bribery':\n      switch (compendium) {\n        case 'CE':\n          return (skillName);\n        case 'CL':\n          return ('Liaison');\n      }\n      break;\n    case 'Advocate':\n      switch (compendium) {\n        case 'CE':\n          return (skillName);\n        case 'CL':\n          return ('Admin');\n      }\n      break;\n    default:\n      return (skillName);\n  }\n}\n\nfunction compendiumErrors (skillName) {\n  switch (skillName) {\n    case 'Leader':\n      return ('Leadership');\n    case 'Survival':\n      return ('Survival ');\n    case 'Piercing Weapons':\n      return ('Melee Weapons (Piercing Weapons)');\n    case 'Jack o\\' Trades':\n      switch (compendium) {\n        case 'CE':\n          return ('Jack of All Trades');\n        case 'CL':\n          return ('Jack-of-All-Trades');\n      }\n      break;\n    case 'Melee Combat':\n      return ('Melee');\n    case 'Demolitions':\n      return ('Demolition / Explosives');\n    case 'Shotgun':\n      return ('Gun Combat (Shotguns)');\n    case 'Autopistol':\n      return ('Auto Pistol');\n    case 'Carousing':\n      return ('Carouse');\n    case 'Computer':\n      return ('Computers');\n    case 'Administration':\n      return ('Admin');\n    case 'Investigation':\n      return ('Investigate');\n    case 'Grav Vehicle':\n      return ('Grav Vehicles');\n  }\n}","flags":{"core":{"sourceId":"Macro.JiYaxclkfGY70Tnl"},"cf":{"id":"temp_f2ldg9aw4y"}},"ownership":{"default":0,"GOmBKof9PfoHZ54T":3,"OIomk1IgyRly5ocC":3},"_stats":{"systemId":"twodsix","systemVersion":"1.45.2","coreVersion":"10.272","createdTime":1657745009103,"modifiedTime":1657745009103,"lastModifiedBy":"OIomk1IgyRly5ocC"},"folder":null,"sort":0,"_id":"dgnATH0boMFvbwxu"}
{"name":"Trade Macro v10","type":"script","author":"OIomk1IgyRly5ocC","img":"cargo-crate.svg","scope":"global","command":"/* eslint-disable no-undef */\n/* eslint-disable semi */\n// Macro to generated trade goods pricing and quantities for sale based on\n// planet UPP and a trader modier for skill attributes\n// Updated for FVTT 0.8\n\nconst DEBUG = false; // Display debuggin info to console\nconst RANDOM = true; // Whether trade goods for player to buy are seelcted at random (true).  Otherwise, goods available are determined by trade codes.\ngenerateTable();\n\nasync function generateTable () {\n  let uwp = 0;\n  let traderDM = 0;\n  let compendium = '';\n  await new Promise((resolve) => {\n    new Dialog({\n      content: `\n      <input placeholder = \"World UWP\" type=\"text\" name=\"uwp\"/>\n      <input placeholder = \"Trader DM\" type=\"number\" name=\"traderDM\"/>`,\n      title: 'Generate Trade Table',\n      buttons: {\n        CE: {\n          label: 'Cepheus Engine',\n          callback: btn => {\n            resolve(uwp = btn.find(\"[name='uwp']\").val(),\n              traderDM = btn.find(\"[name='traderDM']\").val(),\n              compendium = 'CE');\n          }\n        },\n        CL: {\n          label: 'Cepheus Light',\n          callback: btn => {\n            resolve(uwp = btn.find(\"[name='uwp']\").val(),\n              traderDM = btn.find(\"[name='traderDM']\").val(),\n              compendium = 'CL');\n          }\n        }\n      }\n\n    }).render(true);\n  });\n\n  const tcodes = getTradeCode(uwp);\n  const starBase = uwp[0];\n  if (traderDM === '') { traderDM = 0; }\n\n  if (DEBUG) {\n    console.log('Trade codes:', tcodes);\n  }\n  if (DEBUG) {\n    console.log('UWP: ', uwp, traderDM);\n  }\n\n  let tradeTable = '';\n  tradeTable +=\n      processTradeTable('Advanced Trade Goods - ' + compendium, tcodes,\n        parseInt(traderDM), compendium, starBase);\n\n  tradeTable += processTradeTable('Basic Goods - ' + compendium, tcodes,\n    parseInt(traderDM), compendium, starBase);\n  const htmlContent =  `<table><tbody><tr>\n      <th style=\"text-align:left\">Good</th>\n      <th style=\"text-align:center\">Available to Buy (tons)</th>\n      <th style=\"text-align:center\">Player Buys (Cr)</th>\n      <th style=\"text-align:center\">Player Sells (Cr)</th></tr>\n      ${tradeTable}\n      </tbody></table>`;\n\n  await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: `Trade Table for: ${uwp}`,\n      content: htmlContent,\n      buttons: {\n        Ok: {\n          label: 'Ok',\n          callback: (html) => { resolve(html.find('input').val()); },\n          height: '12px',\n          resizable: true,\n        },\n        Output: {\n\t      label: 'Output',\n          callback: (html) => { JournalEntry.create({\n              name: `Trade Output`,\n              content: htmlContent\n            });\n          },\n          height: '12px',\n          resizable: true,\n        }\n      }\n    },\n    { width: 700, height: 600 })\n      .render(true);\n  });\n}\n\nfunction processTradeTable (tableName, trcodes, offset, compendium, starBase) {\n  let returnText = '';\n  let isAvailable = [];\n  const table = game.tables.contents.find(t => t.name === tableName);\n\n  // If random selection, determine trade goods available\n  if (tableName.indexOf('Basic') === -1 && RANDOM) {\n    isAvailable = determineGoods(table, compendium, starBase);\n  }\n  if (DEBUG) {\n    console.log(isAvailable);\n  }\n\n  // Process each item (good) in table\n  for (let row = 0; row < table.results.size; ++row) {\n    // Parse row of table that is tab delimited\n    const details = table.results._source[row].text.split('\\t');\n\n    let tons = 0;\n    let pSellPr = 0;\n    let pBuyPr = 0;\n    let pBuyMod = 0;\n    let pSellMod = 0;\n\n    // Determine planet trade code price DM's\n    switch (compendium) {\n      case 'CL':\n        pSellMod = getMod(trcodes, details[4]);\n        pBuyMod = getMod(trcodes, details[3]);\n        break;\n      case 'CE':\n        pSellMod = getMod(trcodes, details[4]) - getMod(trcodes, details[3]);\n        pBuyMod = getMod(trcodes, details[3]) - getMod(trcodes, details[4]);\n        break;\n    }\n\n    if (DEBUG) {\n      console.log('Name: ', details[0]);\n    }\n    if (DEBUG) {\n      console.log('pSellMod:', pSellMod);\n    }\n    if (DEBUG) {\n      console.log('pBuyMod:', pBuyMod);\n    }\n\n    // Determine tons available for player to buy\n    if (RANDOM) {\n      tons = new Roll('@dice', { dice: details[2] }).evaluate({ async: false }).total;\n      if (tableName.indexOf('Basic') === -1) {\n        tons *= isAvailable[row];\n      }\n    } else {\n      if ((tableName.indexOf('Basic') !== -1) ||\n          (availableGood(trcodes, details[3]))) {\n        tons = new Roll('@dice', { dice: details[2] }).evaluate({ async: false }).total;\n      }\n    }\n\n    // Determine Player Buys price\n    if (tons === 0) {\n      tons = '---';\n      pBuyPr = '---';\n    } else {\n      pBuyPr = Math.round(details[1] * rollPriceAdjust(pBuyMod + offset, 'buy', compendium));\n    }\n\n    // Determine Player Sells price\n    pSellPr = Math.round(\n      details[1] * rollPriceAdjust(pSellMod + offset, 'sell', compendium));\n\n    // generate buy-sell table row in html\n    if (row === table.results.size - 1) {\n      returnText +=\n          `<tr style=\"border-bottom:1px solid red\"><td style=\"padding-right:5px\">${details[0]}</td>`;\n    } else {\n      returnText += `<tr><td style=\"padding-right:5px\">${details[0]}</td>`;\n    }\n\n    returnText += `<td style=\"padding-right:5px; text-align:center\">${tons}</td>\n    <td style=\"padding-right:5px; text-align:center\">${pBuyPr}</td><td style=\"padding-right:5px; text-align:center\">${pSellPr}</td></tr>`;\n  }\n\n  return (returnText);\n}\n\nfunction determineGoods (table, compendium, starBase) {\n  const numItems = table.results.size;\n  // fill with zeros\n  const availList = new Uint8Array(numItems);\n\n  let baseAdj = 0;\n\n  // Calculate starport roll bonus if Cepheus Light\n  if (compendium === 'CL') {\n    switch (starBase.toUpperCase()) {\n      case 'A':\n        baseAdj = 4;\n        break;\n      case 'B':\n        baseAdj = 2;\n        break;\n      case 'C':\n        baseAdj = 1;\n        break;\n      case 'D':\n        baseAdj = 0;\n        break;\n      case 'E':\n        baseAdj = -2;\n        break;\n    }\n  }\n\n  let numDraws = new Roll('1D6+@adj', { adj: baseAdj }).evaluate({ async: false }).total;\n  if (DEBUG) {\n    console.log('Number of Draws: ', numDraws);\n  }\n\n  if (numDraws < 1) {\n    numDraws = 1;\n  }\n\n  for (let i = 0; i < numDraws; ++i) {\n    const item = new Roll('1D@num', { num: numItems }).evaluate({ async: false }).total;\n    ++availList[item - 1];\n  }\n  return (availList);\n}\n\nfunction getMod (planetTrCodes, goodCodes) {\n  let modifier = 0;\n  for (const code of planetTrCodes) {\n    const codePos = goodCodes.indexOf(code);\n    if (codePos !== -1) {\n      const codeValue = hexToBase10(goodCodes[codePos + 3]);\n      if (codeValue > modifier) {\n        modifier = codeValue;\n      }\n    }\n  }\n  return (parseInt(modifier));\n}\n\nfunction rollPriceAdjust (offset, type, compendium) {\n  let tableName = '';\n  if (type === 'sell') {\n    tableName += 'Sales Price Table';\n  } else {\n    tableName += 'Purchase Price Table';\n  }\n  tableName += ` - ${compendium}`;\n\n  if (DEBUG) {\n    console.log('Price Adjustment Table: ', tableName);\n  }\n\n  const table = game.tables.contents.find(t => t.name === tableName);\n\n  const r = new Roll('2D6+@mod', { mod: offset }).evaluate({ async: false }).total;\n  const details =\n      table.results._source[Math.min(Math.max(r - 2, 0), table.results.size - 1)].text;\n\n  if (DEBUG) {\n    console.log('Roll on Adj Table: ', r);\n  }\n  if (DEBUG) {\n    console.log('Relative Price: ', details);\n  }\n  return (parseInt(details) / 100);\n}\n\nfunction availableGood (trcodes, goodCodes) {\n  for (const code of trcodes) {\n    if (goodCodes.indexOf(code) !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Generate Trade Codes per Cepheus Light Rules\nfunction getTradeCode (UWPprofile) {\n  const returnText = [];\n\n  // Strip out dash if used in profile\n  UWPprofile = UWPprofile.replace('-', '');\n\n  if (UWPprofile.length > 7) {\n    const size = hexToBase10(UWPprofile[1]);\n    const atmo = hexToBase10(UWPprofile[2]);\n    const hydro = hexToBase10(UWPprofile[3]);\n    const pop = hexToBase10(UWPprofile[4]);\n    const techL = hexToBase10(UWPprofile[7]);\n\n    if (atmo > 3 && atmo < 10 && hydro > 3 && hydro < 9 && pop > 4 && pop < 8) {\n      returnText.push('Ag');\n    }\n\n    if (size === 0 && atmo === 0 && hydro === 0) {\n      returnText.push('As');\n    }\n\n    // Different for CE\n    if (pop === 0) {\n      returnText.push('Ba');\n    }\n\n    if (atmo > 1 && hydro === 0) {\n      returnText.push('De');\n    }\n\n    if (atmo > 9 && hydro > 0) {\n      returnText.push('Fl');\n    }\n\n    if ((atmo === 5 || atmo === 6 || atmo === 8) && hydro > 3 && hydro < 10 &&\n        pop > 3 && pop < 9) {\n      returnText.push('Ga');\n    }\n\n    if (pop > 8) {\n      returnText.push('Hi');\n    }\n\n    if (techL > 11) {\n      returnText.push('Ht');\n    }\n\n    if (atmo < 2 && hydro > 0) {\n      returnText.push('Ic');\n    }\n\n    if ((atmo < 3 || atmo === 4 || atmo === 7 || atmo === 9) && pop > 8) {\n      returnText.push('In');\n    }\n\n    if (pop > 0 && pop < 4) {\n      returnText.push('Lo');\n    }\n\n    if (techL < 6) {\n      returnText.push('Lt');\n    }\n\n    if (atmo < 4 && hydro < 4 && pop > 5) {\n      returnText.push('Na');\n    }\n\n    if (pop > 3 && pop < 7) {\n      returnText.push('Ni');\n    }\n\n    if (atmo > 1 && atmo < 6 && hydro < 4) {\n      returnText.push('Po');\n    }\n\n    if ((atmo === 6 || atmo === 8) && pop > 5 && pop < 9) {\n      returnText.push('Ri');\n    }\n\n    if (hydro === 10) {\n      returnText.push('Wa');\n    }\n\n    if (atmo === 0) {\n      returnText.push('Va');\n    }\n  }\n  return (returnText);\n}\n\n// Convert hex value to base10\nfunction hexToBase10 (value) {\n  switch (value.toUpperCase()) {\n    case 'A':\n      return (10);\n    case 'B':\n      return (11);\n    case 'C':\n      return (12);\n    case 'D':\n      return (13);\n    case 'E':\n      return (14);\n    case 'F':\n      return (15);\n    case 'G':\n      return (16);\n    default:\n      return (Number(value));\n  }\n}","flags":{"core":{"sourceId":"Macro.Ao2uIf0VLS429nZW"},"cf":{"id":"temp_fjmheaydrno"}},"ownership":{"default":0,"OIomk1IgyRly5ocC":3},"_stats":{"systemId":"twodsix","systemVersion":"1.45.2","coreVersion":"10.272","createdTime":1657743303574,"modifiedTime":1657743303574,"lastModifiedBy":"OIomk1IgyRly5ocC"},"folder":null,"sort":0,"_id":"fXmm8Qes1mVdHPfh"}
{"_id":"kW917odfsvHV60ao","name":"#[CF_tempEntity]","type":"chat","author":"msuh6wePTuFs4VOF","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"cf":{"id":"temp_yxfg7c9wgej","folderPath":[],"color":"#000000","fontColor":"#FFFFFF","name":"CD Ship Penetration","children":[],"icon":"","sorting":"a","contents":["IIIorheuGQ9QI3Wa","HWU3NBJ6EypWuAJg","t0zcwm4StWB3gPyJ","DYW2X8dLR1uIHdqt","JNQ5EiQyC6q1kHwd","Qe55Wd3Tv24Qg5b0"],"version":"2.4.6"}}}
{"name":"UPP Translator v10","type":"script","author":"OIomk1IgyRly5ocC","img":"systems/twodsix/assets/icons/science-planetology.svg","scope":"global","command":"/* eslint-disable no-undef */\n/* eslint-disable semi */\n/* eslint-disable spaced-comment */\n// Simple UWP translator based on information from Cepheus Light, Cepheus Engine\n// SRD and https://travellermap.com/doc/secondsurvey#uwp\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntranslateCode('text', 'Enter UWP Code');\n\nasync function translateCode (type, text) {\n  let value = await new Promise((resolve) => {\n    new Dialog({\n      modal: true,\n      title: 'Input UWP Code',\n      content: `<table style=\"width:100%\"><tr><th><label>${\n          text}</label></th><td><input type=\"${\n          type}\" name=\"input\"/></td></tr></table>`,\n      buttons: {\n        Ok: {\n          label: 'Ok',\n          callback: (html) => { resolve(html.find('input').val()); }\n        }\n      },\n      default: \"Ok\",\n      render: (html) => {\n        html.find(\"[name=input]\").focus();\n      }\n    }).render(true);\n  });\n\n  if (value !== '') {\n    let parse = parseCode(value);\n\n    await new Promise((resolve) => {\n      new Dialog({\n        modal: true,\n        title: `UWP Translation for: ${value}`,\n        content:\n          `<table style=\"width:100%;\"><tbody><tr><th>Characteristic</th><th>Description</th></tr>${\n              parse}</tbody></table>`,\n        buttons: {\n          Ok: {\n            label: 'Ok',\n            callback: (html) => { resolve(html.find('input').val()); }\n          }\n        },\n      default: \"Ok\"\n      }).render(true);\n    });\n  }\n}\n\nfunction parseCode (profile) {\n  // Strip out dash if used in profile\n  profile = profile.replace('-', '');\n\n  let UWPtables = [\n    'Starport Type', 'World Size - CL', 'Atmosphere', 'Hydrographics',\n    'Population', 'Government', 'Law Level - CL', 'Tech Level - CL'\n  ];\n\n  // parse starport, this is non-numeric\n  let message = `<tr><td style=\"padding-right:5px\">${UWPtables[0]} (${\n      profile[0]})</td><td>${getStarportDescr(profile[0])}</td></tr>`;\n\n  // process rest of UWP\n  for (let i = 1; i < Math.min(profile.length, UWPtables.length); i++) {\n    message += `<tr>${getUWPparameter(profile[i], UWPtables[i])}</tr>`;\n  }\n\n  // generate trade codes\n  message += getTradeCodes(profile);\n  return (message);\n}\n\n// Lookup a hex digit from a roll table\nfunction getUWPparameter (value, tableName) {\n  let item = hexToBase10(value);\n  const table = game.tables.contents.find(t => t.name === tableName);\n  if (item < table.results.size) {\n    let details = table.results._source[item].text;\n    return (`<td style=\"padding-right:5px\">${tableName} (${value})</td><td>${details}</td>`);\n  } else {\n    return (`<td style=\"padding-right:5px\">${tableName} (${value})</td><td>UNKNOWN TABLE ITEM</td>`);\n  }\n}\n\n// Convert hex value to base10\nfunction hexToBase10 (value) {\n  switch (value.toUpperCase()) {\n    case 'A':\n      return (10);\n    case 'B':\n      return (11);\n    case 'C':\n      return (12);\n    case 'D':\n      return (13);\n    case 'E':\n      return (14);\n    case 'F':\n      return (15);\n    case 'G':\n      return (16);\n    default:\n      return (Number(value));\n  }\n}\n\n// Lookup starport description (letter values that are not hex)\nfunction getStarportDescr (value) {\n  let rtext = '';\n  switch (value.toUpperCase()) {\n    case 'A':\n      rtext =\n        'Excellent Quality. Refined fuel and annual maintenance overhaul available. Shipyard capable of constructing starships and non-starships present.';\n      break;\n    case 'B':\n      rtext =\n        'Good Quality. Refined fuel and annual maintenance overhaul available. Shipyard capable of constructing non-starships present.';\n      break;\n    case 'C':\n      rtext =\n        'Routine Quality. Only unrefined fuel available. Reasonable repair facilities present.';\n      break;\n    case 'D':\n      rtext =\n        'Poor Quality. Only unrefined fuel available. No repair facilities present.';\n      break;\n    case 'E':\n      rtext =\n        'Frontier Installation. Essentially a marked spot of bedrock with no fuel, facilities, or bases present.';\n      break;\n    case 'X':\n      rtext = 'No Starport. No provision is made for any ship landings.';\n      break;\n    default:\n      rtext = 'Unknown';\n  }\n  return (rtext);\n}\n\n// Generate Trade Codes per Cepheus Light Rules\nfunction getTradeCodes (profile) {\n  let rtext = '';\n\n  if (profile.length < 8) {\n    rtext += 'UWP Code too short</td></tr>';\n  } else {\n    const size = hexToBase10(profile[1]);\n    const atmo = hexToBase10(profile[2]);\n    const hydro = hexToBase10(profile[3]);\n    const pop = hexToBase10(profile[4]);\n    const techL = hexToBase10(profile[7]);\n\n    if (atmo > 3 && atmo < 10 && hydro > 3 && hydro < 9 && pop > 4 && pop < 8) {\n      rtext += 'Ag - Agricultural, ';\n    }\n\n    if (size === 0 && atmo === 0 && hydro === 0) {\n      rtext += 'Asteroid, ';\n    }\n\n    if (pop === 0) {\n      rtext += 'Ba - Barren, ';\n    }\n\n    if (atmo > 1 && hydro === 0) {\n      rtext += 'De - Desert, ';\n    }\n\n    if (atmo > 9 && hydro > 0) {\n      rtext += 'Fl - Non-water Fluid Oceans, ';\n    }\n\n    if ((atmo === 5 || atmo === 6 || atmo === 8) && hydro > 3 && hydro < 10 && pop > 3 && pop < 9) {\n      rtext += 'Ga - Garden, ';\n    }\n\n    if (pop > 8) {\n      rtext += 'Hi - High Population, ';\n    }\n\n    if (techL > 11) {\n      rtext += 'Ht - High Technology, ';\n    }\n\n    if (atmo < 2 && hydro > 0) {\n      rtext += 'Ic - Ice Capped, ';\n    }\n\n    if ((atmo < 3 || atmo === 4 || atmo === 7 || atmo === 9) && pop > 8) {\n      rtext += 'In - Industrial, ';\n    }\n\n    if (pop > 0 && pop < 4) {\n      rtext += 'Lo - Low Population, ';\n    }\n\n    if (techL < 6) {\n      rtext += 'Lt - Low Technology, ';\n    }\n\n    if (atmo < 4 && hydro < 4 && pop > 5) {\n      rtext += 'Na - Non Agricultural, ';\n    }\n\n    if (pop > 3 && pop < 7) {\n      rtext += 'Ni - Non Industrial, ';\n    }\n\n    if (atmo > 1 && atmo < 6 && hydro < 4) {\n      rtext += 'Po - Poor, ';\n    }\n\n    if ((atmo === 6 || atmo === 8) && pop > 5 && pop < 9) {\n      rtext += 'Ri - Rich, ';\n    }\n\n    if (hydro === 10) {\n      rtext += 'Wa - Water World, ';\n    }\n\n    if (atmo === 0) {\n      rtext += 'Va - Vacuum, ';\n    }\n    // Get rid of extra comma and space\n    if (rtext.length > 0) {\n      rtext = rtext.slice(0, -2);\n    }\n\n    rtext += '</td></tr>';\n  }\n\n  return (`<tr><td \"padding-right:5px\">Trade Codes</td><td>${rtext}`);\n}","flags":{"core":{"sourceId":"Macro.EZSLYFLu3zJdwEQ7"},"cf":{"id":"temp_f505ax12at"}},"ownership":{"default":0,"msuh6wePTuFs4VOF":3,"OIomk1IgyRly5ocC":3},"_stats":{"systemId":"twodsix","systemVersion":"1.45.2","coreVersion":"10.272","createdTime":1657743027446,"modifiedTime":1657743027446,"lastModifiedBy":"OIomk1IgyRly5ocC"},"folder":null,"sort":0,"_id":"nh95l3n2fB5RwYmB"}
{"_id":"qvEzYThjl4ULKLwt","name":"First Aid","type":"script","author":"GOmBKof9PfoHZ54T","img":"systems/twodsix/assets/icons/medkit.svg","scope":"global","command":"/* eslint-disable semi */\n// Heal a target(s) based on last Medicine skill check\n// for FVTT v0.8\n\nconst MULTIPLIER = 1.0;\nfirstAid();\n\nasync function firstAid() {\n  const patients = await game.user.targets;\n  const pointsToHeal = await getHealAmount();\n\n  if (patients !== null && pointsToHeal > 0) {\n    for (const patient of patients) {\n       patient.actor.healActor(pointsToHeal*MULTIPLIER);\n    }\n  }\n}\n\n\nasync function getHealAmount() {\n  const skillRolls = await game.messages._source.filter(m => m.flavor !== undefined);\n  const healing = await skillRolls.filter(m => m.flavor.includes('Medicine'));\n  let retVal = 0;\n\n  if (healing.length > 0) {\n    retVal = healing[healing.length - 1].flags.twodsix.effect;\n    // console.log(\"Calc Heal\", retVal);\n  }\n  return (retVal);\n}","folder":null,"sort":0,"permission":{"default":0,"KrOiJLcZ94d4ZOL3":3,"GOmBKof9PfoHZ54T":3},"flags":{"core":{"sourceId":"Macro.IBL2ElLEH0wqgxeK"},"cf":{"id":"temp_4phcz5md1kh"}}}
{"_id":"sjueQWH9uUGswWku","name":"#[CF_tempEntity]","type":"chat","author":"GOmBKof9PfoHZ54T","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"GOmBKof9PfoHZ54T":3},"flags":{"cf":{"id":"temp_fjmheaydrno","folderPath":[],"color":"#000000","fontColor":"#FFFFFF","name":"Trade","children":[],"icon":"","sorting":"a","contents":["I1WTNcC7e3bwHrMY","AS3ARyKVJ41X8frm","i5Bp9LxCJNLqE72P","76icBqXqOsPUq6w7"],"version":"2.4.6"}}}
{"_id":"t0zcwm4StWB3gPyJ","name":"Internal - Craft","type":"script","author":"msuh6wePTuFs4VOF","img":"systems/twodsix/assets/icons/components/otherInternal.svg","scope":"global","command":"let compendiumTables = await game.packs.get(\"twodsix.cepheus-deluxe-tables\").getDocuments();\nlet table = await compendiumTables.find(o => o.name === \"Internal - Craft\");\nlet result = await table.draw();","folder":null,"sort":0,"permission":{"default":0,"msuh6wePTuFs4VOF":3},"flags":{"core":{"sourceId":"Macro.2wp1RB1XaOIEUgOd"},"cf":{"id":"temp_yxfg7c9wgej"}}}
